<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Chris Eidhof</title>
		<description>
			Personal Blog
		</description>
		<link>http://chris.eidhof.nl</link>
		<atom:link href="http://chris.eidhof.nl/feed.xml" rel="self" type="application/rss+xml"/>
		<item>
			<title>Weeknotes № 15</title>
			<description>
				&lt;p&gt;
	In Germany everyone gets time off for easter, and we spent time with friends and family. We also planted a bunch more things, really looking forward to summer where we’ll have a lot of fresh vegetables. We’re trying out a bunch of new things, so excited to see how well everything goes. The spinach, salad and onions are cropping up already.
&lt;/p&gt;
&lt;p&gt;
	I worked on getting our book building software up to date. There are many dependencies (rendering using attributed strings, drawing diagrams, our own layout implementation to help generate explanations, and so on). We were still depending on an internal version of &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;attributed-string-builder&lt;/a&gt; which was essentially an extend subset of the public repository.
&lt;/p&gt;
&lt;p&gt;
	I configured everything to (hopefully) be a very low-friction experience. I set up single Xcode project with virtually all code in Swift packages. For editing, we can just drop the package into the Xcode project and have a local editable version.
&lt;/p&gt;
&lt;p&gt;
	While we wrote the book using Dropbox Paper, we now are typesetting it using attributed strings. All of our previous published books were typeset using a mix of homegrown scripts, Pandoc, LaTeX and a bunch of other stuff. We always had the full setup working on at least one machine, but we decided to try a different setup for this release.
&lt;/p&gt;
&lt;p&gt;
	I also worked on a simple “connecting the dots” view to draw lines between arbitrary views in the view hierarchy. This works by propagating the center of each of the icons up (using anchors), and then drawing lines between all the connections. This technique is useful beyond this example, of course:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/2023-15/1-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/2023-15/1.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	I’ll try to either write this up as a blog post or we’ll record it for Swift Talk.
&lt;/p&gt;
&lt;p&gt;
	The painter spent last week painting the house, I helped with a bunch of preparation and final details. Next week we’ll get the flooring done on the ground floor, and in a few more weeks we’ll finally move in!
&lt;/p&gt;
			</description>
			<pubDate>Sun, 16 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-15</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-15</guid>
		</item>
		<item>
			<title>Weeknotes № 14</title>
			<description>
				&lt;p&gt;
	I worked a bit on porting some “older” features we had in our test implementation of attributed string builder, and added them to our &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;public repository&lt;/a&gt;. We’re planning to use that for publishing our book. We want back and forth a lot, but we believe it’s easier to work with our own implementation based off of attributed strings than trying to wrangle LaTeX or desktop programs such as InDesign into the layout we want. By using attributed strings, we can write our book while automatically having our code checked, syntax highlighted and have proper previews.
&lt;/p&gt;
&lt;p&gt;
	I wrote a &lt;a href=&quot;https://github.com/chriseidhof/swiftui-video-recording&quot;&gt;small library&lt;/a&gt; that helps me to record a SwiftUI view as an mp4 video. I always find it annoying to precisely record a video of an interaction, transition or animation, and this should hopefully make it a little bit easier, as it records exactly the bounds of a view: I don’t have to fiddle with positioning QuickTime or hope I get the timing right.
&lt;/p&gt;
&lt;p&gt;
	I also wrote up a quick blog post about &lt;a href=&quot;http://chris.eidhof.nl/post/matched-geometry-effect&quot;&gt;matched geometry effect&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	I was really tired from the move last week, and this week went pretty slow because of that. I didn’t even have the energy for my daily run, but instead of fighting that I just rested. I started preparing an upcoming workshop, working a bit on the book (we forgot to write about EnviromentObject). While I did feel very tired, I am also way less stressed now that it’s only the final bits of the house.
&lt;/p&gt;
&lt;p&gt;
	We spent a few days in and around our new house, cleaning things, building more raised beds, and so on. It feels pretty great to do that now that spring is really starting.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 09 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-14</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-14</guid>
		</item>
		<item>
			<title>When Matched Geometry Effect Doesn&apos;t Work</title>
			<description>
				&lt;p&gt;
	One of the SwiftUI APIs that always kept confusing me is matchedGeometryEffect. I often thought I could use it but couldn’t figure out exactly how to make it work, always getting weird effects. I tried to distill the problematic code down to the essence:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    @State private var detail = false
    @Namespace private var ns

    var body: some View {
        ZStack {
            if detail {
                Color.red
                    .frame(width: 100, height: 100)
                    .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
            } else {
                Color.red
                    .frame(width: 300, height: 300)
                    .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
            }
        }
        .animation(.default, value: detail)
        .onTapGesture {
            detail.toggle()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	When you run the code above, you will see that there is something like a transition between the two red squares, but there’s nothing smooth about it. Why doesn’t the small square grow bigger, and why doesn’t the large square grow smaller? They only seem to shift.
&lt;/p&gt;
&lt;video class=&quot;light-video&quot; width=&quot;320&quot; height=&quot;320&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-light.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;video class=&quot;dark-video&quot; width=&quot;318&quot; height=&quot;318&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-dark.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;
	What helped me understand is &lt;a href=&quot;https://talk.objc.io/episodes/S01E260-matched-geometry-effect-part-3&quot;&gt;reimplementing matchedGeometryEffect&lt;/a&gt;. While there is a bit more to it, the matched geometry effect will essentially apply a &lt;code&gt;frame&lt;/code&gt; and an &lt;code&gt;offset&lt;/code&gt; modifier. Let’s consider only the if-branch:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Color.red
    .frame(width: 100, height: 100)
    .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	If we virtually “inline” the matched geometry effect, the code looks like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Color.red
    .frame(width: 100, height: 100)
    .offset(x: &amp;lt;matchedX&amp;gt;, y: &amp;lt;matchedY&amp;gt;)
    .frame(width: &amp;lt;matchedWidth&amp;gt;, height: &amp;lt;matchedHeight&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	While the outer frame and offset will have an effect on where the view is positioned, we can see that the inner frame will ultimately control the size, overriding the proposed size of the outer frame modifier. In other words: the red square will &lt;em&gt;always&lt;/em&gt;
	 render at 100⨉100.
&lt;/p&gt;
&lt;p&gt;
	To fix this, we need to change the order of our modifiers so that the &lt;code&gt;matchedGeometryEffect&lt;/code&gt; is directly applied to the color. As the color is completely flexible, this doesn’t cause any problems. Here’s the changed &lt;code&gt;if&lt;/code&gt; branch, the &lt;code&gt;else&lt;/code&gt; branch needs to change as well:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Color.red
     .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
     .frame(width: 100, height: 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Now our rectangle animates smoothly between the two states:
&lt;/p&gt;
&lt;video class=&quot;light-video&quot; width=&quot;318&quot; height=&quot;318&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-fixed-light.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;video class=&quot;dark-video&quot; width=&quot;318&quot; height=&quot;318&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-fixed-dark.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;
	(Of course, the above animation could be done in a much simpler way by removing the if/else, but I wanted to work with a minimal example that uses matched geometry effect.)
&lt;/p&gt;
			</description>
			<pubDate>Tue, 04 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/matched-geometry-effect</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/matched-geometry-effect</guid>
		</item>
		<item>
			<title>Weeknotes № 13</title>
			<description>
				&lt;p&gt;
	We spent a lot of last week moving our stuff, culminating on Friday where we had to actually leave our old place. This was pretty stressful with two kids running around, and the oldest getting pretty sick at the beginning of the week. But we managed, all of our stuff is in the basement of the new place and we are in a furnished apartment for the next weeks.
&lt;/p&gt;
&lt;p&gt;
	A lot of stuff got done: the tilers finished the upstairs bathroom and unexpectedly also finished the downstairs one, the electricity is mostly done, and the painter painted two more rooms. Now it’s a bit of a waiting game where little will happen next week, but hopefully everything should be finished somewhere around the end of this month.
&lt;/p&gt;
&lt;p&gt;
	We also prepared and recorded a bunch of Swift Talk episodes in which we reimplemented SwiftUI’s anchors from “scratch” (only using preferences and geometry readers). Doing this gave us a lot of insight into how these actually work and their limitations. We reimplemented parts of SwiftUI many times (anchors, &lt;a href=&quot;https://talk.objc.io/episodes/S01E260-matched-geometry-effect-part-3&quot;&gt;matched geometry effect&lt;/a&gt;, the &lt;a href=&quot;https://talk.objc.io/collections/swiftui-layout-explained&quot;&gt;layout system&lt;/a&gt;, the &lt;a href=&quot;https://talk.objc.io/collections/swiftui-state-explained&quot;&gt;state system&lt;/a&gt;) and every time we learn a lot about how these things work. We also get feedback from other people that it helps them, which is always nice.
&lt;/p&gt;
&lt;p&gt;
	I’ve been working on a pure Swift implementation of Git’s core data model recently, and can currently read out (simple) repositories and their objects (commits, trees, and blobs). On the train back from the studio I also managed to read out Packfiles. I’d like to add support for writing things as well as adding support for the index. At its core, git truly is simple and beautiful, even though I’m the first to admit that the interface has often confused me.
&lt;/p&gt;
&lt;p&gt;
	We started preparing for another workshop sometime at the middle of this month, should be really fun. We’ve gotten into a really good flow where we know exactly what topics to cover, but can still create a completely custom workshop for the team we’re working with. One of the things I’m also pretty happy about is that we have a hard limit on team sizes (sixteen people max) so that we can really make it personal and spend a decent amount of time with all the individual attendees. Preparing and running the workshops is pretty stressful but also very rewarding.
&lt;/p&gt;
&lt;p&gt;
	Another random thought that occupied me a bit is that my nationality never felt like a big part of my identity while I lived in the Netherlands, but does so now. Even when I emigrated to Berlin it was never a big deal – there were so many foreigners in my little bubble there that I hardly ever stood out. However, here on the countryside, it’s a different story. There are a lot of people that are from here and have never really been anywhere else. It feels like even Germans from other parts of Germany stand out, let alone foreigners like me. I don’t really mind, but it’s been an interesting observation.
&lt;/p&gt;
&lt;p&gt;
	I’ve also been thinking about AI a bit recently (who hasn’t?). I don’t have a very strong opinion on the topic, I believe it’ll change our daily lives (especially for us computer people), but I don’t feel like anyone can really predict &lt;em&gt;how&lt;/em&gt;
	 it’ll change things. I’m not sure whether it’ll be good or bad (probably both?). One of my favorite bloggers on the topic is &lt;a href=&quot;https://simonwillison.net&quot;&gt;Simon Willison&lt;/a&gt;, who’s doing pretty practical experiments as well as trying to take a more high-level view.
&lt;/p&gt;
&lt;p&gt;
	I’ve experimented with ChatGPT to do generate sample data (for our workshops), and it was great at that, even providing JSON data and matching Swift structs that conform to &lt;code&gt;Codable&lt;/code&gt;. I tried using it to generate some algorithms that I know (e.g. a flow layout) but I’m not quite comfortable giving that part up (even though it did do a pretty good job). It also is useful for generating ideas. For example, I let it generate ten or twenty ideas for marketing our new book. Much of it isn’t stuff I couldn’t think of myself, but there were one or two things that I could definitely use. I don’t personally feel like letting it do things that feel important to me – most of programming, writing, and other forms of communication.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 02 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-13</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-13</guid>
		</item>
		<item>
			<title>Weeknotes № 12</title>
			<description>
				&lt;p&gt;
	Last weekend, we spent the entire sunny weekend around our new house, and with my 5-yo daughter we tackled a whole bunch of small projects: building some walls, sorting out wood, and building and planting our first raised bed.
&lt;/p&gt;
&lt;p&gt;
	We recorded a few Swift Talk episodes on Monday, and afterwards (while in Berlin) I met up with a bunch of nice people. The episodes themselves are about using &lt;code&gt;Codable&lt;/code&gt; for routing. This is an interesting technique we actually prototyped a few years ago to get bidirectional conversion between an enum and a (String) route you’d use for a web server.
&lt;/p&gt;
&lt;p&gt;
	We also continued polishing our book. I wrote a section about matched geometry effect which Florian promptly rewrote into something much clearer. I would like to also turn this into a blog post, hopefully soon.
&lt;/p&gt;
&lt;p&gt;
	Over at the house, the plasterers finished, the painter came over for an afternoon to try out the paint, and the tilers started on the upstairs bathroom. Things are looking way more finished, even though it’s still quite a ways to go. I had moved a whole bunch of stuff already, and yesterday we had our family help us move almost everything else. We do still have the bare essentials over at the old place, and we’ll move that on our last day here (next week!). Before moving in, we’ll stay in a holiday home for a few weeks while everything is getting finished.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 26 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-12</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-12</guid>
		</item>
		<item>
			<title>Weeknotes № 11</title>
			<description>
				&lt;p&gt;
	This week we managed to send over all our remaining chapters except for the introduction to technical review. At the last minute, we added a section about coordinate spaces and anchors. In thinking about this, we realized that anchors are purely convenience, it really seems to be just a measurement in the global coordinate space that can automatically be converted to another view’s local coordinate space.
&lt;/p&gt;
&lt;p&gt;
	What triggered this was us using anchors to add lines (pointers) to our diagrams, as shown &lt;a href=&quot;https://m.objc.io/@chris/110015766999219930&quot;&gt;here&lt;/a&gt;. Anchors are great for measuring things at different parts of the view tree. Note that the diagrams aren’t finished yet, for example, we’d like to avoid lines going through text and want to have nicer shapes and line endings (the arrows at the line ends are not looking good).
&lt;/p&gt;
&lt;p&gt;
	I also worked a bit on the pure Swift Git library (after being tired from writing and editing), and can read a repository’s commits and explore the other objects in the repository as well using an interactive SwiftUI app.
&lt;/p&gt;
&lt;p&gt;
	While we gave away a whole bunch of things that we don’t want to move, we still ended up with a bunch of trash. Getting this picked up caused me a whole lot of stress this week, with people going through our trash as it was out, ripping open our bags and throwing everything on the street. I confronted the people who did it and told them very clearly to not do this again.
&lt;/p&gt;
&lt;p&gt;
	At day care, there was a presentation at night for the parents, about small kids and media. While the idea behind it was good, the presentation was pretty boring, had unrealistic figures and I felt that it was generally a bit uninformed. I wonder if people are aware of the risks and possibilities that all the new technology has. I did speak up, as did another parent, and I think I got my message across. I guess in the end, we’ll end up not understanding the technology our kids use, not supervising it (once they become teenagers). I guess the only thing we can try is to remain in touch with our kids and try to keep the conversation going.
&lt;/p&gt;
&lt;p&gt;
	I started going to therapy a few months ago, to deal with all the stress around renovation and moving, as well as working on some personal things. It’s been incredibly useful. I did realize that work is one of the most relaxing things for me, being in the zone with interesting challenges that I know I can solve. Most of the other areas of my life cause more stress than work does, which is pretty funny to me.
&lt;/p&gt;
&lt;p&gt;
	I’m looking forward to building some garden beds this weekend over at the new house. I cleared away the last bits of trunks that were still laying around that area, and will build at least one raised bed this weekend, hopefully as a family activity.
&lt;/p&gt;
&lt;p&gt;
	I also experimented a bit more with ChatGPT and see if I can use it in my daily workflow (essentially treating it as a fast, “dumb” assistant). I’ve previously used it to generate sample data for a workshop (sample JSON including a Codable struct), and it worked really well for that. This week I had it generate a pretty-printed version of &lt;code&gt;CGSize&lt;/code&gt;, &lt;code&gt;CGPoint&lt;/code&gt; and &lt;code&gt;CGRect&lt;/code&gt;. I would have typed it faster myself, but I want to get into the habit of experimenting with it to automate boring bits. Essentially, I have no trust in the correctness of its output, so for me, the key is using it in places where correctness can either be verified very easily (a pretty printer) or where correctness isn’t a factor (sample data for displaying a list of shopping items).
&lt;/p&gt;
			</description>
			<pubDate>Sat, 11 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-11</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-11</guid>
		</item>
		<item>
			<title>Weeknotes № 10</title>
			<description>
				&lt;p&gt;
	This week we tried to  “ship” a bunch of Thinking in SwiftUI chapters to &lt;a href=&quot;https://oleb.net&quot;&gt;Ole&lt;/a&gt;, who’s doing the technical review. We managed to get the chapters on view layout, view trees and environment over to him. We went through all of these chapters once again, and also added a bunch of diagrams.
&lt;/p&gt;
&lt;p&gt;
	I wanted to get the State chapter ready as well, but reading through it I felt that we could do better. So we went back, added some more explanations and some diagrams. &lt;a href=&quot;https://m.objc.io/@chris/110000399994383042&quot;&gt;Here’s a sample&lt;/a&gt; of what the state diagrams could look like (this is a first version).
&lt;/p&gt;
&lt;p&gt;
	I had some nice quality time with my oldest daughter this week. Among other things, we built a small kid-sized picknick table together out of scrap wood, which we both really enjoyed.
&lt;/p&gt;
&lt;p&gt;
	At the new house, I moved over a whole bunch of stuff (to the basement). We had three trees cut down a few weeks back, and the logs were massive and had been laying around in the garden because I couldn’t move them alone. We turned them into smaller chunks using the chainsaw and I then split them using a wedge and a large sledge hammer. This was quite fun (hard physical work outside) but also pretty exhausting.
&lt;/p&gt;
&lt;p&gt;
	The plasterers are pretty far now with the loam plastering. It’s turning out really nice, but the big issue is that it takes multiple weeks (at the least) to dry. As we’ll have to move out of our existing house within a few weeks, this isn’t ideal. So we found a small temporary place where we can hopefully live for a month or so as the final finishing steps happen (painting and flooring).
&lt;/p&gt;
&lt;p&gt;
	As an experiment, I tried implementing a pure Git library in Swift, using some of the ideas from &lt;a href=&quot;https://wyag.thb.lt&quot;&gt;Write yourself a Git&lt;/a&gt;. It went quite well, I managed to read trees, blobs and commits. The core of Git is extremely simple (honestly), and I think building a few commands on top of this small library (such as committing, or maybe even merging) will be a very interesting learning experience.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 10 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-10</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-10</guid>
		</item>
		<item>
			<title>Weeknotes № 9</title>
			<description>
				&lt;p&gt;
	This week we continued writing our book. I wrote the first draft of the last chapter that wasn’t written yet (Environment). We both spent a lot of time editing and finetuning the other chapters. I think the animations chapter and the section on alignment will be extremely helpful.
&lt;/p&gt;
&lt;p&gt;
	Together with &lt;a href=&quot;https://www.juulspee.nl&quot;&gt;Juul&lt;/a&gt; we added a bunch of new features to the workshop app, which included changing three applications: the Mac app that the attendees use, the instructor app and the server (written in Swift). To provide a unified API to all three I used the technique described in the &lt;a href=&quot;http://chris.eidhof.nl/post/simpler-swift-apis/&quot;&gt;previous post&lt;/a&gt;. I also tried to look into distributed actors, as they seem to solve exactly this problem, but I couldn’t wrap my head around them (and how to use them for my client/server purposes) in a single morning.
&lt;/p&gt;
&lt;p&gt;
	I went through a big fight with libpq (or actually, with Swift Package Manager trying to understand that the package is installed on my machine). I really dread fixing these kinds of errors (the package is there, but for some reason SPM can’t see it). In the end I came up with a hack to make it work on my machine (it worked fine in Docker). In the future, I’d really like to replace our postgres dependency with sqlite, compiled in using the &lt;a href=&quot;https://www.sqlite.org/amalgamation.html&quot;&gt;amalgamation&lt;/a&gt;. That way, it’s almost impossible for that dependency to break. Also, it’ll allow us to upload a single binary to our server (containing everything).
&lt;/p&gt;
&lt;p&gt;
	We recorded a bunch of new episodes in our backend series, should be a lot of fun to watch.
&lt;/p&gt;
&lt;p&gt;
	At the new home, plastering is going well (even though we had to stop for a day due to low temperatures). We also had some trees felled — one neighbor was very happy about that and another neighbor went full-on passive-aggresive on me. Oh well. We’re now pretty sure we’ll have to move out of our rental house before we’ll be able to move into the new house. Should be interesting…
&lt;/p&gt;
			</description>
			<pubDate>Fri, 03 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-09</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-09</guid>
		</item>
		<item>
			<title>You Don&apos;t Need Routes</title>
			<description>
				&lt;p&gt;
	For the Mac app we use during our workshops, we also have a web server with an API. The server handles user registration and some other minor things. We just added support for sending one-way messages (from the instructors to the attendees). This involved the following steps:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added endpoints for each separate messages
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added a route parser for each endpoint
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added the code to actually handle the endpoint (update the database, etc.)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added endpoints to the client library
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added all the necessary data and wrapper methods to the client library for each endpoint
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	This is a bit of work, and we are already using a simple trick to make this easier. Because we will only use this API from Swift, our endpoints require that you post JSON to them. For example, to add a message, you can simply send the following &lt;code&gt;Codable&lt;/code&gt; struct, encoded as JSON:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct AddMessage: Codable, Hashable {
    var workshop: String
    var message: Message
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	We can share this struct between client and server and they automatically have matching interfaces. As I was out for a walk, it dawned on me that we could also do the same for our endpoints! Instead of having separate routes for each API endpoint, we could just have a single API endpoint that takes in a huge enum and switches on that. We can then share that enum with the client and they’d automatically be in sync.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;public enum APICall: Hashable, Codable {
    case addWorkshop(WorkshopData)
    case addMessage(AddMessage)
    case messages(workshop: String)
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	This saves us from a lot of manual typing, as we don’t need separate endpoints and routes, neither in the client nor the server. We simply add a case to the enum and add a corresponding wrapper call on the client. On the train, I made the change and was able to delete a bunch of code from both client and server.
&lt;/p&gt;
&lt;p&gt;
	One possible improvement would be to somehow encode the result type in this enum as well. Our &lt;code&gt;messages&lt;/code&gt; call will always return a &lt;code&gt;[Message]&lt;/code&gt; array, but that’s not encoded in the type system. However, for now, this greatly simplifies our code.
&lt;/p&gt;
&lt;p&gt;
	I wouldn’t recommend this approach when your API is consumed from other languages, as it will probably feel quite weird for those developers. But when you’re writing a server that will only be used by Swift clients, this is really nice.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 03 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/simpler-swift-apis</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/simpler-swift-apis</guid>
		</item>
		<item>
			<title>Weeknotes № 8</title>
			<description>
				&lt;p&gt;
	This week we mostly spent on writing the update of &lt;a href=&quot;https://www.objc.io/books/thinking-in-swiftui/&quot;&gt;Thinking in SwiftUI&lt;/a&gt;. I think by now we rewrote every chapter from scratch, and also added a new chapter about view trees. The ideas are still the same, but due to us diving deeper and definitely due to all the workshops we’ve hosted our explanations have gotten way better.
&lt;/p&gt;
&lt;p&gt;
	Over the weekend, I succesfully made bagels again (I think I now finally have found a way for me that produces consistent good results). I did burn my thumb, though.
&lt;/p&gt;
&lt;p&gt;
	I moved a bunch of the heaviest stuff I own (e.g. my table saw) to the basement of our new house, where I’ll be temporarily setting up my small workshop. I renovated the basement myself (as it wasn’t super important that it got done quickly or with a high quality). It feels quite nice to finally put at least one room to use.
&lt;/p&gt;
&lt;p&gt;
	The first two days of the week I helped out quite a bit around the new house to get everything prepared, because on Wednesday the plasterers started. This meant helping out moving cables out of the way (above the ceiling panels), cleaning, moving everything out of their way, and so on. They will be plastering everything with a thick layer of clay (Lehm/loam). This material works well with the radiant wall heating and has a lot of nice properties – among other things, it regulates humidity and absorbs a bunch of unwanted particles. Let’s see how that turns out once we live there!
&lt;/p&gt;
&lt;p&gt;
	For the book, we worked mostly on the state and advanced layout chapters. I wrote a flow layout example in many different ways: once using the &lt;code&gt;Layout&lt;/code&gt; protocol and once using &lt;code&gt;ZStack&lt;/code&gt; and preferences. I then added alignment (both vertically within a single line as well as the horizontal alignment of the lines). I tried at least four different ways to implement the algorithm, and I’m still not completely sure what the simplest implementation is (they all have different qualities). We also started writing the environment chapter, as we already have written all the other chapters (although none are quite finished yet).
&lt;/p&gt;
&lt;p&gt;
	I love writing in VIM (or Spacemacs), but we started a few drafts in Dropbox Paper. To our own surprise, this worked really well for us. In fact, we’re still using it now that the chapters are almost done. It combines a very minimal UI (with features similar to Markdown) with change tracking and commenting. There’s no messing around with embedding images, you simply drag them into the document and you’re done. Later, once we are done writing, we’ll use the &lt;a href=&quot;https://talk.objc.io/episodes/S01E342-attributed-string-builder-part-6&quot;&gt;attributed string builder&lt;/a&gt; library to render this all into a nice PDF.
&lt;/p&gt;
&lt;p&gt;
	When I went to get my bike repaired, the owner of the repair shop mentioned he wouldn’t be in the day after because he needed to attend a seminar the next day. Asking more about this, it turns out that it was about electric bikes, automatic firmware updates, and so on. I’m a little scared for that future. I just want to ride my bike, I really, really don’t want it bricked because of a software update of sorts.
&lt;/p&gt;
&lt;p&gt;
	One other thing I had to think about this week is how most software has become very complex. I read &lt;a href=&quot;https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/&quot;&gt;a post by Julia Evans&lt;/a&gt; about build systems, and I feel the same way. While we do use a build system for most projects (either Xcode projects or SPM) I’m very hesitant to depend on many libraries, because coming back to a project a few years later will inevitably be painful as the dependencies have changed. Complexity isn’t just in the build system — in our workshops, I often notice that people don’t grasp essential parts of Swift (value types, generics, and so on). The language has become so big that it’s hard to really understand, even if you work with it every single day.
&lt;/p&gt;
&lt;p&gt;
	In general, I wonder if at some point people will be so fed up with that complexity that there will be a trend back to simpler languages or ways of doing things. Or maybe something like &lt;a href=&quot;https://www.unison-lang.org&quot;&gt;Unison&lt;/a&gt; will catch on.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 24 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-08</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-08</guid>
		</item>
		<item>
			<title>Weeknotes № 7</title>
			<description>
				&lt;p&gt;
	This week I mostly spent coordinating the house renovation, and doing lots of odd jobs. We had to take down a very old ceiling (not sure if it was the original ceiling from when the house was built) consisting of plaster, reed matting, and boards, ending up with just the ceiling joists. The next day, we covered the spaces in between the ceiling joists with drywall, which turned out really nice!
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chris.eidhof.nl/images/ceiling.jpg&quot; title/&gt;&lt;/p&gt;
&lt;p&gt;
	We also cleaned up almost everything in the house, because next week the plastering company will start and they need a completely empty space. To move stuff over (from our current house to the basement of the new place) I borrowed a trailer and drove my car with a trailer for the first time in my life (so far, it went fine).
&lt;/p&gt;
&lt;p&gt;
	Yesterday, the windows were finally installed. We had the holes cut out months ago, and since then, the place has been pretty dark. Now we finally have light! It actually makes an immense difference, things are finally starting to look a bit more like the result we had in mind.
&lt;/p&gt;
&lt;p&gt;
	Work-wise, I worked on some backend stuff for our workshop app, did the bookkeeping (we do this using &lt;a href=&quot;https://www.ledger-cli.org&quot;&gt;ledger&lt;/a&gt;) and chatted with a bunch of people. Next week we’ll finally start writing again, really looking forward to that.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 17 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-07</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-07</guid>
		</item>
		<item>
			<title>Weeknotes № 6</title>
			<description>
				&lt;p&gt;
	We got our internet access working at the new house. We also won’t move before the end of March, probably later, but at least that part is working. We had a bit of a setback this week, as we found out that the plastering will take quite a bit longer than calculated. It’s a big chain of dependencies: we can’t paint before we’ve plastered, we can’t lay the floor before we’ve painted, and we can’t start plastering before the new window frames are installed (which should happen next week!).
&lt;/p&gt;
&lt;p&gt;
	My best friend from The Netherlands came over, we just hung out, did a little bit of work on the house together (we put up a new bathroom ceiling). I made bagels, which turned out much tastier than last week, and they looked good, too!
&lt;/p&gt;
&lt;p&gt;
	As I’m quite pressed for time these days, I need to be a bit creative about combining activities. I ran with the youngest in the running stroller (she gets to sleep, the rest of the family gets a break, and I get to do some exercise). Also, we bought a cargo bike last year, and it arrived last fall. Every time I cycle go to our new house I bring a few boxes.
&lt;/p&gt;
&lt;p&gt;
	I’ve been using our cargo bike to transport kids (it fits a baby car seat and two small kids), transport building materials (although 6 bags of cement was pushing it), and I’ve already filled it up many times to move stuff over to the new house. It’s been a game-changer for me. I &lt;em&gt;think&lt;/em&gt;
	 I would’ve still done most of the trips by bike if it wasn’t for the cargo bike, but this way I can avoid virtually all our car usage within the city limits.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chris.eidhof.nl/images/cargo-bike.jpg&quot; title/&gt;&lt;/p&gt;
&lt;p&gt;
	I ordered “Airlineschienen” (I think it’s called lashing rail in English?) for the inside of the bike’s cargo box. This will let me flexibly attach a bunch of stuff, and should help me strap down the load. I’ll also use them to attach hooks for shopping bags (they tend to fall over when small), kids backpacks, etc.
&lt;/p&gt;
&lt;p&gt;
	(I did “upgrade” our car recently, adding a hitch and an external AirPlay screen. Of course, this was much simpler/cheaper/more sustainable than buying a new (used) car.)
&lt;/p&gt;
&lt;p&gt;
	We ran a two-day workshop, this time in CEST. It was really nice to have people in the workshop that already had a bunch of SwiftUI experience, we could go much deeper into the material and answer a lot of questions.
&lt;/p&gt;
&lt;p&gt;
	We improved some minor things in our interactive workshop explanation app, in the workshop itself and recorded a few episodes around our new backend library (which we plan to use to modernize/rewrite the Swift Talk backend with).
&lt;/p&gt;
&lt;p&gt;
	I published two blog posts this week that both came directly from questions in the workshop. The first post contains tips about the &lt;a href=&quot;http://chris.eidhof.nl/post/swiftui-environment-tips/&quot;&gt;SwiftUI Environment&lt;/a&gt; and the second post is about &lt;a href=&quot;http://chris.eidhof.nl/post/semantic-colors/&quot;&gt;semantic colors and styles&lt;/a&gt;. The second post includes some nice graphics that are automatically generated when building this site — they should look good with both the dark theme and the light theme.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 10 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-06</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-06</guid>
		</item>
		<item>
			<title>Semantic Colors and Styles</title>
			<description>
				&lt;p&gt;
	In SwiftUI, most colors are &lt;em&gt;semantic colors&lt;/em&gt;
	 that get resolved at runtime. For example, here are a few colors (rendered on macOS) in both light mode and dark mode. It’s a little hard to see, but even colors like &lt;code&gt;.blue&lt;/code&gt; and &lt;code&gt;.red&lt;/code&gt; are slighly different:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/1-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/1.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	Note that the above colors might be influenced by other things as well. For example, they can change when you increase the color scheme contrast or enable other accessibility settings.
&lt;/p&gt;
&lt;p&gt;
	In my experience, most people build their apps in light mode, with dark mode often being added as an afterthought. This is absolutely fine. However, it does make sense to get into the habit of using &lt;code&gt;.primary&lt;/code&gt; instead of &lt;code&gt;.black&lt;/code&gt;, and using &lt;code&gt;.secondary&lt;/code&gt; for a secondary color. Then those parts will automatically adapt.
&lt;/p&gt;
&lt;p&gt;
	By default, text (and shapes, etc.) are not rendered using the current foreground color (which is .primary by default) but using the current &lt;em&gt;foreground style&lt;/em&gt;
	. Here’s a rectangle filled with the four foreground styles:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/3-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/3.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	As far as I know, &lt;code&gt;Color.primary&lt;/code&gt; and &lt;code&gt;Color.secondary&lt;/code&gt; are (currently) not settable via the environment, but the foreground style is. For example, here’s the same view, but with a &lt;code&gt;.foregroundStyle(.blue, .green, Gradient(colors: [.red, .yellow])&lt;/code&gt; applied. Note that the tertiary and quaternary styles are optional. The tertiary style defaults to the secondary style, and the quaternary to the tertiary style. As you can see, you don’t just have to use colors, you can also use any other type that conforms to &lt;code&gt;ShapeStyle&lt;/code&gt;:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/5-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/5.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	There’s a fourth useful style: &lt;code&gt;BackgroundStyle&lt;/code&gt;. You would typically use it using &lt;code&gt;.background&lt;/code&gt;, for example, like so:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Text(&amp;quot;Hello, world&amp;quot;)
    .padding(10)
    .background(.background)
    .padding(20)
    .background(.blue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	On macOS, this will default to white in light mode, and a dark gray in dark mode. Similar to the foreground styles, you can also set it using the environment:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/7-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/7.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	In general, stick to using &lt;code&gt;.primary&lt;/code&gt; and &lt;code&gt;.secondary&lt;/code&gt; colors when you can. Also use the semantic foreground styles and background style, and you will be well prepared to add dark mode support to your app. Of course, you could go much further and define your own stylesheet, pass it through the environment and rely on that, but the builtin semantic styles will support both color scheme changes and respect accessibility settings.
&lt;/p&gt;
			</description>
			<pubDate>Thu, 09 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/semantic-colors</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/semantic-colors</guid>
		</item>
		<item>
			<title>SwiftUI Environment Tips</title>
			<description>
				&lt;p&gt;
	In our &lt;a href=&quot;https://www.objc.io/workshops/&quot;&gt;SwiftUI workshop&lt;/a&gt; we always include an exercise where you learn about how the environment works. Often, we build some kind of stylesheet that gets passed down the environment, from the root view. The stylesheet could look like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct Stylesheet {
    var buttonColor: Color = .blue
    var cardColor: Color = .primary.opacity(0.1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	In a child view, we then read and use the stylesheet (you’ll also have to add an environment key for this to work):
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct Nested1: View {
    @Environment(\.stylesheet) private var stylesheet
    var body: some View {
        Text(&amp;quot;Hello&amp;quot;)
            .background(stylesheet.buttonColor)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	In the above view, the code works fine, but we could also write it using a more specific key path:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct Nested2: View {
    @Environment(\.stylesheet.buttonColor) private var buttonColor
    var body: some View {
        Text(&amp;quot;Hello&amp;quot;)
            .background(buttonColor)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	This technique is useful when you have nested types (e.g. typically a stylesheet has more than just two colors, and might be composed out of other structs). There’s a &lt;em&gt;performance advantage&lt;/em&gt;
	 as well: when anything in the stylesheet changes, &lt;code&gt;Nested1&lt;/code&gt; will be rerendered. &lt;code&gt;Nested2&lt;/code&gt;, however, will only get rerendered whenever the &lt;code&gt;buttonColor&lt;/code&gt; property changes. This can make a big difference performance-wise (although often it doesn’t matter).
&lt;/p&gt;
&lt;p&gt;
	You can also use this with other properties — even computed properties. For example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct Nested3: View {
    @Environment(\.dynamicTypeSize.isAccessibilitySize) 
    private var isAccesibilitySize
    
    var body: some View {
        // ...
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Another thing you might notice in the code samples above is that we marked our environment property as &lt;code&gt;private&lt;/code&gt;. We always do this for Environment, State, StateObject as well as ScaledMetric. These properties are populated just before the body renders, and it makes no sense to expose them to the outside. We even have a very crude &lt;a href=&quot;https://gist.github.com/chriseidhof/d8c079ca97099a6122f37890a144e9b0&quot;&gt;swiftlint rule&lt;/a&gt; for this.
&lt;/p&gt;
			</description>
			<pubDate>Wed, 08 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/swiftui-environment-tips</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/swiftui-environment-tips</guid>
		</item>
		<item>
			<title>Weeknotes № 5</title>
			<description>
				&lt;p&gt;
	During the first three days of this week we ran a workshop in PST. This was actually a two-day workshop, split into three days because of the timezone difference. I’m an early riser by nature, and staying up until midnight isn’t really my strength. While it’s pretty easy during the workshop as we are constantly either helping people work through exercises or explaining things, I did have to take some extra rest the day after.
&lt;/p&gt;
&lt;p&gt;
	It is always kind of nice to start working at 6pm, as the day before is very long. I do find it hard to relax before work, my natural mode is to do all the things I need to do before early afternoon. I didn’t manage to really do nothing, so instead I spent a lot of time doing things around the new house, sorting out things in our current house.
&lt;/p&gt;
&lt;p&gt;
	The house renovation has been pretty stressful for me, as there are so many dependencies and things going on that I don’t have a clue about. I think we mostly have been pretty lucky with the contractors. I also learned so much during the build, doing plastering, building drywalls, bricklaying, and so on. It’s a lot of fun but stressful. Luckily there’s a very clear end in sight.
&lt;/p&gt;
&lt;p&gt;
	To me, having built and helped with many parts of our house gives the house a lot of “personal quality”. In our current house, I designed and built a very simple kitchen completely from scratch. Any store bought kitchen is probably better, but for me personally, having built the kitchen all by myself brings me much more satisfaction than the nicest store bought kitchen could ever give me. Of course, my wife doesn’t agree and so we bought a proper kitchen for the new house.
&lt;/p&gt;
&lt;p&gt;
	Since the birth of our second daughter (and the house renovation) I cut down my running a lot. Instead of running twice a day most days, now I’m not even running every day. I’m not sure what I’ll do with that once we’ve moved. Part of me wants to get back into the groove of high mileage marathon training, and part of me wants to have more breadth: running, cycling, swimming, canoeing are all activities that we have the perfect surroundings for.
&lt;/p&gt;
&lt;p&gt;
	Last week we started experimenting with a different kind of server-side library (it’s super small, actually) that will look familiar if you have used SwiftUI. The big advantage is that the SwiftUI style of building views (or endpoints, or static site pages, or…) allows you to automatically inject the environment without any effort on the side of the framework user. For server-side pages, this would often contain the current session, the database connection (or an abstraction), and possibly a bunch of other stuff. We have currently solved this in our Swift Talk using &lt;a href=&quot;https://talk.objc.io/episodes/S01E141-functional-dependencies&quot;&gt;a reader pattern&lt;/a&gt;, but the SwiftUI way is much nicer to use.
&lt;/p&gt;
&lt;p&gt;
	I didn’t cook many fancy things, but I did make bagels. Last time, my bagels turned out to be really tasty but didn’t look right. This time around, the bagels looked perfect but were a bit bland. I’ll try again this weekend.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 03 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-05</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-05</guid>
		</item>
		<item>
			<title>Variadic Views</title>
			<description>
				&lt;p&gt;
	This week’s post about how the SwiftUI view protocol &lt;a href=&quot;http://chris.eidhof.nl/post/swiftui-views-are-lists/&quot;&gt;really represents lists&lt;/a&gt; stirred a bit of controversy on Mastodon. But I think we all learned a bit from the discussion that followed (I definitely did).
&lt;/p&gt;
&lt;p&gt;
	To deal with these lists of views (e.g. during layout) we can use the underscored variadic view API. I learned about variadic views through the &lt;a href=&quot;http://movingparts.io/variadic-views-in-swiftui&quot;&gt;Moving Parts&lt;/a&gt; blog. I don’t know whether this API is going to change in the future, whether it’s App-Store-proof, and so on. It’s probably underscored for a good reason. With that out of the way, let’s get started!
&lt;/p&gt;
&lt;p&gt;
	First, I wanted to get a way to iterate over the view list and turn them into views. This code is a bit weird, but we only need to write it once. To get access to the view list, we need to construct a type that conforms to &lt;code&gt;_VariadicView_MultiViewRoot&lt;/code&gt;
&lt;sup&gt;&lt;a href=&quot;#fnref1&quot; name=&quot;fnref-rev1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
. The only requirement we need to implement is the &lt;code&gt;body&lt;/code&gt; method. We can provide that using a closure:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct Helper&amp;lt;Result: View&amp;gt;: _VariadicView_MultiViewRoot {
    var _body: (_VariadicView.Children) -&amp;gt; Result

    func body(children: _VariadicView.Children) -&amp;gt; some View {
        _body(children)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	The &lt;code&gt;_VariadicView.Children&lt;/code&gt; type is a random access collection we can loop over. The elements conform to &lt;code&gt;Identifiable&lt;/code&gt; and &lt;code&gt;View&lt;/code&gt;. In addition, we can access the &lt;em&gt;traits&lt;/em&gt;
	 of the elements (more about this later).
&lt;/p&gt;
&lt;p&gt;
	To use our &lt;code&gt;Helper&lt;/code&gt; above, we can provide an extension on &lt;code&gt;View&lt;/code&gt;:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;extension View {
    func variadic&amp;lt;R: View&amp;gt;(@ViewBuilder process: @escaping (_VariadicView.Children) -&amp;gt; R) -&amp;gt; some View {
        _VariadicView.Tree(Helper(_body: process), content: { self })
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Again, the code above is pretty obscure but we only need to write it once. Before we start using this, let’s create a list of views:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;@ViewBuilder var subviews: some View {
    Rectangle()
        .frame(width: 30, height: 30)
    ForEach(0..&amp;lt;3) { ix in
        Text(&amp;quot;Hello \(ix)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	The above view builder defines a list containing four views: a rectangle and three text labels. We can use these in a container view:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;HStack { subviews }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/variadic-views/1-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/variadic-views/1.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	Using our &lt;code&gt;variadic&lt;/code&gt; method, we can write more helper methods. For example, we could intersperse views in between the elements:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;extension View {
    @ViewBuilder
    func intersperse&amp;lt;V: View&amp;gt;(@ViewBuilder _ divider: () -&amp;gt; V) -&amp;gt; some View {
        let el = divider()
        variadic { children in
            if let c = children.first {
                c
                ForEach(children.dropFirst(1)) { child in
                    el
                    child
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	This lets us create an &lt;code&gt;HStack&lt;/code&gt; with dividers in between the elements:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;HStack {
    subviews.intersperse {
        Divider().fixedSize()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/variadic-views/3-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/variadic-views/3.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	We can also write a more low-level abstraction like &lt;code&gt;reduce&lt;/code&gt; (which unfortunately requires &lt;code&gt;AnyView&lt;/code&gt;):
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;extension View {
    func reduce&amp;lt;R: View&amp;gt;(@ViewBuilder _ combine: @escaping (AnyView, AnyView) -&amp;gt; R) -&amp;gt; some View {
        variadic { children in
            if let c = children.first {
                children.dropFirst(1).reduce(AnyView(c), { l, r in
                    AnyView(combine(l, AnyView(r)))
                })
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	We could use this to render the list of views in reverse order, with circles in between for good measure:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;HStack {
    subviews.reduce { view1, view2 in
        view2
        Circle().frame(width: 5, height: 5)
        view1
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/variadic-views/5-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/variadic-views/5.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	Variadic views are also very useful when you want to write reusable components that take a list of views with different types. For example, you could write your own picker that has an interface like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct Sample: View {
    @State private var selection: Int? = 0

    var body: some View {
        MyPicker(selection: $selection) {
            Text(&amp;quot;One&amp;quot;).myTag(1)
            Image(systemName: &amp;quot;doc&amp;quot;).myTag(2)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	To implement this, we’ll use traits and variadic views. The tags are stored as traits. These are similar to preferences, but don’t bubble up as high. For example, they won’t bubble up out of a container view.
&lt;/p&gt;
&lt;p&gt;
	Here’s the helper to tag views:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;fileprivate struct MyTag: _ViewTraitKey {
    static var defaultValue: AnyHashable? = Optional&amp;lt;Int&amp;gt;.none
}

extension View {
    func myTag&amp;lt;Value: Hashable&amp;gt;(_ value: Value) -&amp;gt; some View {
        _trait(MyTag.self, value)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	In our picker, we loop over all the views and put them in an &lt;code&gt;HStack&lt;/code&gt;. We add a tap gesture to make the items tappable. We use the custom tag to check whether the item is selected. Except for the variadics and tags, the code is straightforward SwiftUI:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct MyPicker&amp;lt;Selection: Hashable, Content: View&amp;gt;: View {
    @Binding var selection: Selection?
    @ViewBuilder var content: Content

    var body: some View {
        HStack {
            content.variadic { children in
                ForEach(children) { child in
                    let tag: Selection? = child[MyTag.self].flatMap { $0 as? Selection }
                    let selected = tag == selection
                    child
                        .onTapGesture {
                            selection = tag
                        }
                        .padding(.bottom, 5)
                        .overlay(alignment: .bottom) {
                            if selected {
                                Color.accentColor
                                    .frame(height: 1)
                            }
                        }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	I think variadic views are essential if we want to write components that mimic the first-party components. They’re useful for small things (intersperse) and bigger things (components that want to be flexible about the types of the child views).
&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
	&lt;hr/&gt;
	&lt;ol&gt;
		&lt;li id=&quot;fnref1&quot;&gt;
			&lt;p&gt;
				You can find more information about this by spelunking into the &lt;code&gt;.swiftinterface&lt;/code&gt; file that SwiftUI provides. Using your Terminal, go to /Applications/Xcode.app, type &lt;code&gt;find . -name &amp;quot;SwiftUI.swiftmodule&amp;quot;&lt;/code&gt; and go to that folder. Inside you’ll find &lt;code&gt;.swiftinterface&lt;/code&gt; files which contain &lt;em&gt;a lot&lt;/em&gt;
				 of interesting things.
				 &lt;a href=&quot;#fnref-rev1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;
			</description>
			<pubDate>Fri, 27 Jan 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/variadic-views</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/variadic-views</guid>
		</item>
		<item>
			<title>Weeknotes № 4</title>
			<description>
				&lt;p&gt;
	While Florian was away the first few days this week to hold a workshop, I prepared some more things for next week’s workshop. During the workshop, we use an internal Mac app to present things to the attendees. For example, we show layout trees, render trees and have an interactive alignment visualization. Some of these only worked well in dark mode, and I fixed that. I used a combination of &lt;code&gt;.background(.background)&lt;/code&gt; to set the background to the current background style, as well as &lt;code&gt;.backgroundStyle(colorScheme == .light ? …)&lt;/code&gt; to set the current background style.
&lt;/p&gt;
&lt;p&gt;
	In the workshop app that our attendees receive, I also added interactive render tree examples:
&lt;/p&gt;
&lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/images/workshop-app-dark.png 2x&quot;&gt;
   &lt;img srcset=&quot;http://chris.eidhof.nl/images/workshop-app.png 2x&quot; style=&quot;width: auto;&quot;&gt;
&lt;/picture&gt;

&lt;p&gt;
	In our alignment demos, I used &lt;a href=&quot;https://www.fivestars.blog/articles/reverse-masks-how-to/&quot;&gt;&lt;code&gt;.reversedMask&lt;/code&gt;&lt;/a&gt; to obscure parts of a view. You can see this in the screenshot below: the alignment guides are continuous lines with the text (+ padding) cut out:
&lt;/p&gt;
&lt;picture&gt;
   &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/images/alignment-screenshot-dark.png 2x&quot;&gt;
   &lt;img srcset=&quot;http://chris.eidhof.nl/images/alignment-screenshot.png 2x&quot; style=&quot;width: auto;&quot;&gt;
&lt;/picture&gt;

&lt;p&gt;
	In recent years, I only wrote up to three posts a year, this week I wrote three posts (including this one). First, I wrote about how &lt;a href=&quot;http://chris.eidhof.nl/post/swiftui-views-are-lists&quot;&gt;SwiftUI views are lists&lt;/a&gt; and about &lt;a href=&quot;http://chris.eidhof.nl/post/variadic-views/&quot;&gt;Variadic Views&lt;/a&gt;. The variadic view posts includes rendered SwiftUI views that are automatically generated at compile time of this blog. The images automatically switch between light mode and dark mode (similar to the screenshots in this post).
&lt;/p&gt;
&lt;p&gt;
	At home, I made two of my favorite left over recipes: we used left over pasta sauce for empanada filling. Also, we used left over risotto and made a small batch of air fried mozarella arancinis.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 27 Jan 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-04</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-04</guid>
		</item>
		<item>
			<title>SwiftUI Views are Lists</title>
			<description>
				&lt;p&gt;
	When you write SwiftUI, all your views conform to the &lt;code&gt;View&lt;/code&gt; protocol. The name of this protocol is a bit misleading: I it could be called &lt;code&gt;Views&lt;/code&gt; or &lt;code&gt;ViewList&lt;/code&gt;, or something else that suggests plurals
&lt;sup&gt;&lt;a href=&quot;#fnrefdiscussion&quot; name=&quot;fnref-revdiscussion&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
.
&lt;/p&gt;
&lt;p&gt;
	For example, consider the following view:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct MyView: View {
     var body: some View {
         Text(&amp;quot;Hello&amp;quot;)
         Text(&amp;quot;World&amp;quot;)
     }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	The type of &lt;code&gt;body&lt;/code&gt; is &lt;code&gt;some View&lt;/code&gt; (an opaque type), and &lt;code&gt;MyView&lt;/code&gt; itself conforms to the &lt;code&gt;View&lt;/code&gt; protocol. So how does the above view render? &lt;em&gt;It depends&lt;/em&gt;
	. When you create an &lt;code&gt;HStack&lt;/code&gt; containing &lt;code&gt;MyView&lt;/code&gt;, the text will be on a single line, but when you create a &lt;code&gt;VStack&lt;/code&gt; the two texts will be below each other. Try this!
&lt;/p&gt;
&lt;p&gt;
	This is not a gimmick: it is essential to how SwiftUI works. When we write views, we’re always constructing &lt;em&gt;lists of views&lt;/em&gt;
	. For example, we could even do something like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct MyOtherView: View {
    var body: some View {
        Text(&amp;quot;Another Text&amp;quot;)
        MyView()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	You can create a &lt;code&gt;VStack&lt;/code&gt; with &lt;code&gt;MyOtherView&lt;/code&gt;, and will see the three views below each other, and when you create an &lt;code&gt;HStack&lt;/code&gt; they’re laid out on a single line.
&lt;/p&gt;
&lt;p&gt;
	In general, we can say that anything that conforms to the &lt;code&gt;View&lt;/code&gt; protocol really represents a list of &lt;code&gt;View&lt;/code&gt;s. In the case of &lt;code&gt;MyOtherView&lt;/code&gt;, we could say the list has a single &lt;code&gt;Text&lt;/code&gt; view and another list (&lt;code&gt;MyView&lt;/code&gt;). These lists get flattened. In the case of &lt;code&gt;MyOtherView&lt;/code&gt;, the &lt;code&gt;body&lt;/code&gt; flattens down to a list containing three views.
&lt;/p&gt;
&lt;p&gt;
	Container views such as &lt;code&gt;HStack&lt;/code&gt; and &lt;code&gt;VStack&lt;/code&gt; take these lists, iterate over them and lay them out. Using the &lt;code&gt;Layout&lt;/code&gt; protocol, you can also see these flattened lists. For example, you could construct your own &lt;code&gt;Layout&lt;/code&gt; implementation to print the number of subviews:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct MyLayout: Layout {
    func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) -&amp;gt; CGSize {
        .zero
    }

    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) {
        print(subviews.count)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	When you have a &lt;code&gt;MyLayout { MyOtherView() }&lt;/code&gt; you’ll see that it will always print 3.
&lt;/p&gt;
&lt;p&gt;
	To create lists with a dynamic size, you can use conditionals such as &lt;code&gt;if&lt;/code&gt;. Note that constructs like &lt;code&gt;ForEach&lt;/code&gt; produce a list as well. These can even be combined with other lists. For example, the code below creates a vertical stack with eight children:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt; VStack {
     MyOtherView()
     ForEach(0..&amp;lt;5) {
         Text(&amp;quot;Label \($0)&amp;quot;)
     }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	As mentioned, the &lt;code&gt;Layout&lt;/code&gt; protocol lets you work with these view lists directly as of iOS 16 and macOS 13. You can also use &lt;a href=&quot;https://movingparts.io/variadic-views-in-swiftui&quot;&gt;variadic views&lt;/a&gt; — a non-public, but stable API — to loop over view lists. The variadic view API is really powerful (for example, you can write things like &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; on view lists) but also quite low-level. I have a gist &lt;a href=&quot;https://gist.github.com/chriseidhof/5ff6ef8786f5635c18b20304ab9d9b01&quot;&gt;here&lt;/a&gt; with some examples, and plan to also write this up soon
&lt;sup&gt;&lt;a href=&quot;#fnrefvariadics&quot; name=&quot;fnref-revvariadics&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
.
&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;
		This article was inspired by the section that Florian wrote for our book &lt;a href=&quot;https://www.objc.io/books/thinking-in-swiftui&quot;&gt;Thinking in SwiftUI&lt;/a&gt;. We’re currently rewriting the book and hope to get it out soon.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;footnotes&quot;&gt;
	&lt;hr/&gt;
	&lt;ol&gt;
		&lt;li id=&quot;fnrefdiscussion&quot;&gt;
			&lt;p&gt;
				Not everyone agrees with this, the &lt;a href=&quot;https://m.objc.io/@chris/109751198846392579&quot;&gt;discussion on Mastodon&lt;/a&gt; was quite interesting.
				 &lt;a href=&quot;#fnref-revdiscussion&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
		&lt;/li&gt;
		&lt;li id=&quot;fnrefvariadics&quot;&gt;
			&lt;p&gt;
				I did write this up, and &lt;a href=&quot;http://chris.eidhof.nl/post/variadic-views&quot;&gt;the post is here&lt;/a&gt;.
				 &lt;a href=&quot;#fnref-revvariadics&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;
			</description>
			<pubDate>Wed, 25 Jan 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/swiftui-views-are-lists</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/swiftui-views-are-lists</guid>
		</item>
		<item>
			<title>Weeknotes № 3</title>
			<description>
				&lt;p&gt;
	After a super busy week last week, I took things a bit easier, especially on the house renovation part. Lots of family time instead!
&lt;/p&gt;
&lt;p&gt;
	Work-wise, I started the week by improving the README for our &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;attributed string builder&lt;/a&gt; project, and also added support for &lt;a href=&quot;https://github.com/objcio/attributed-string-builder/blob/main/Sources/Tests/Environment.swift&quot;&gt;custom environment keys&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	I worked on adding alignment to the &lt;a href=&quot;https://talk.objc.io/episodes/S01E308-the-layout-protocol&quot;&gt;flow layout&lt;/a&gt; we built on Swift Talk. This turned out to be quite tricky: while the code isn’t that hard to write, writing it without duplication was already quite a bit harder and took a few tries. Then I tried to refactor it and use &lt;code&gt;HStack&lt;/code&gt; to layout the rows, but I learned the hard way that &lt;code&gt;Layout&lt;/code&gt;s in SwiftUI aren’t very composable. For example, I can’t seem to get the individual frames out of an existing layout. In any case, I am writing up my experience, both in the form of a blog post and as part of our book update.
&lt;/p&gt;
&lt;p&gt;
	The second half of the week we spent finishing up the details for an upcoming workshop. As we prepare each workshop individually to tailor it to the team, this always takes a lot of time. However, the end product is something we’re always really proud of.
&lt;/p&gt;
&lt;p&gt;
	I really enjoyed this essay about &lt;a href=&quot;https://buttondown.email/hillelwayne/archive/use-the-wrong-tool-for-the-job/&quot;&gt;using the wrong tool for the job&lt;/a&gt;. I always struggled a bit to explain why we like to use Swift for almost everything, despite other languages being more fit for the job. The link explains this extremely well, much better than I could articulate myself. In short, there’s a massive gain for us when we do write things in Swift, because we know the ecosystem and don’t have to learn other tools, even though some problems are better solved using different languages.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 20 Jan 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-03</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-03</guid>
		</item>
		<item>
			<title>Weeknotes № 2</title>
			<description>
				&lt;p&gt;
	At the end of last week, we recorded some &lt;a href=&quot;https://talk.objc.io&quot;&gt;Swift Talk&lt;/a&gt; episodes that build up our new &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;attributed string builder&lt;/a&gt; library. This project allows you to build up an attributed string using result builders, from a number of different sources. For example, you can write Markdown, plain strings, use NSImages or even embed SwiftUI views, all combining into a single attributed string with uniform styling.
&lt;/p&gt;
&lt;p&gt;
	We plan to use this as the basis for laying out our books. These are mainly written in Markdown, but we want to be able to intersperse the Markdown with SwiftUI views (rendered as vector graphics), other images, and we’d like to have some more layout possibilities. For example, we’d like to have multiple columns for some parts, call-out boxes, tables, and so on. Being able to “drop down” to custom attributed strings allows us to do this while still mainly having our text in Markdown.
&lt;/p&gt;
&lt;p&gt;
	I also added support to this blog to render images of inline SwiftUI views inside my posts, although I’m not using that feature yet. Hopefully soon!
&lt;/p&gt;
&lt;p&gt;
	We rewrote the start of the &lt;a href=&quot;https://www.objc.io/books/thinking-in-swiftui&quot;&gt;Thinking in SwiftUI&lt;/a&gt; chapter on view trees. In essence, one of the big insights we had is to start out with describing how view builders construct lists of views, and how almost everything in SwiftUI is a list of (lists of) views. When you have a value that conforms to the &lt;code&gt;View&lt;/code&gt; protocol, it’s always a list of views — it being a single view is the exception. We also worked a bit on explaining the two roles of &lt;code&gt;@State&lt;/code&gt; in SwiftUI: it’s used to both initialize a state property as well as update it (and these are two very different things!). Finally, we started a rewrite of the Advanced Layout chapter (covering the &lt;code&gt;Layout&lt;/code&gt; protocol, preferences, and geometry readers)
&lt;/p&gt;
&lt;p&gt;
	I used &lt;a href=&quot;http://nushell.sh&quot;&gt;Nushell&lt;/a&gt; for the first time. I saw this in Mastodon a while ago and had it installed. I used it to read a JSON file containing all of our episode metadata, projected only the title and synopsis for each episode, and wrote them to a CSV in reverse order. The code was easy to write and is easy to read. I can totally see myself use this shell every once in a while for odd jobs:
&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;
		open episodes.json | select title synopsis | reverse | to csv
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
	This week, we again prepared and recorded a few episodes about attributed strings, and put &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;the code&lt;/a&gt; on GitHub. We also have some more things we’d like to add (table support) and possibly some extras we could do in a separate package (e.g. syntax highlighting, as this pulls in a bunch of dependencies that most people might not need). Currently, the package is only designed to work on Mac and works with TextKit, not sure whether we’ll have bigger ambitions at some point. We would like to add a nice readme and some samples.
&lt;/p&gt;
&lt;p&gt;
	In our new house, I continued renovating and helping out the professionals where I could. I spent a day cleaning the entire construction site, did some final demo, spent two afternoons helping out with the drywall for the bathroom, and a day helping out with bricklaying (even laying some bits myself). We needed to get a bit more done this week, which of course came at the expense of family time. Luckily, busy weeks like this are the absolute exception. (I really enjoy renovating, but lots and lots of family time is more important to me.)
&lt;/p&gt;
&lt;p&gt;
	I continued my fermenting process, last week’s ginger bug was ready and bubbling, so I used it to start making a big batch of ginger beer. I also started mead and made overnight bagels (turned out great and the family loved them).
&lt;/p&gt;
&lt;p&gt;
	I’m reading &lt;a href=&quot;https://www.amazon.com/dp/1469266822&quot;&gt;Crucial Conversations&lt;/a&gt; in the evenings, which is very interesting to me. I’m not sure if I’ll be able to apply the ideas without having a lot of practice, only time will tell.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 13 Jan 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-02</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-02</guid>
		</item>
	</channel>
</rss>