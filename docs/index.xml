<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Chris Eidhof</title>
		<description>
			Personal Blog
		</description>
		<link>http://chris.eidhof.nl</link>
		<atom:link href="http://chris.eidhof.nl/feed.xml" rel="self" type="application/rss+xml"/>
		<item>
			<title>Agentic Coding</title>
			<description>
				&lt;p&gt;
	I teach SwiftUI for a living. Through our &lt;a href=&quot;https://www.swiftuifieldguide.com/workshops/&quot;&gt;workshops&lt;/a&gt;, books, and videos we try to help people build a mental model of how SwiftUI works as well as show some of the details. I really, really enjoy doing that and have built a successful lifestyle business doing just that.
&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;
		Note: this post was written by me, not by an LLM. I don’t feel comfortable at all letting it do that.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
	To me, the quality of the LLMs and their tooling (looking at you, Claude Code) feel like a threat to my business. Will people still need to learn SwiftUI? Do we need to teach in different ways? What will the LLMs be capable of in a year from now? Will there still be enough people to teach?
&lt;/p&gt;
&lt;p&gt;
	I’m in an ongoing process of figuring this out. I’ve experimented a whole bunch with LLMs, have read and watched many things (&lt;a href=&quot;https://steipete.me/posts/2025/essential-reading&quot;&gt;Essential Reading for Agentic Engineers&lt;/a&gt; is a really good start). In this post, I’ll try to share some of the stuff I learned. I’m by no means an expert, but I still hope that this is useful.
&lt;/p&gt;
&lt;h2&gt;
	Easy Things You Can Do Today
&lt;/h2&gt;
&lt;p&gt;
	If you are not using an LLM or have not had success using it (“it just didn’t work for me”) here are some quick ideas in which it can help you today. I’m mainly using Claude Code (and sometimes the Claude desktop app):
&lt;/p&gt;
&lt;p&gt;
	Using the Claude desktop app, you can very quickly build basic prototypes. This can be extremely helpful in understanding a problem and can be a big motivation to build it “properly”. If you need a quick web service prototype, you can use tools like &lt;a href=&quot;https://www.val.town&quot;&gt;val.town&lt;/a&gt; to host (and further refine) stuff.
&lt;/p&gt;
&lt;p&gt;
	If you are working with an existing code base and don’t want an LLM touching your precious code (this is often how I feel!), you can have an LLM build little debugging tools. For example, I had it visualize some internal state for me during debugging. Seeing the current state in my app was much quicker to parse than reading through the debug output. Once I found the problem I immediately deleted the debug code.
&lt;/p&gt;
&lt;p&gt;
	I found it helpful to get a quick grasp of existing code. I just took a bunch of code and asked the LLM to explain it. I absolutely do not feel confident about my understanding after reading the explanation. It just helps to get a first basic feeling so that I can explore further.
&lt;/p&gt;
&lt;p&gt;
	I’ll also ask an LLM about possible algorithms I could use to solve problems. I’ll tell it I know Swift, Haskell and Typescript. I’ll make it generate examples. I don’t trust the output, and will verify things myself.
&lt;/p&gt;
&lt;p&gt;
	I found it helpful to ask an LLM to give me options to implement stuff (while also telling it to explicitily not implement it). I’ll use it to help me think through problems.
&lt;/p&gt;
&lt;p&gt;
	If I feel stuck on something or somehow can’t get started, I can always prompt the LLM to start on something tiny. I can then carry that momentum forward myself.
&lt;/p&gt;
&lt;p&gt;
	If I need to generate mock data (e.g. for my workshops) I’m often too lazy myself to really put time into it. Even the builtin LLM to Xcode has been giving me way better results than doing it myself.
&lt;/p&gt;
&lt;p&gt;
	Personally, if I think of my app’s architecture, I’m much more willing to let an LLM generate “leaf nodes” that can easily be replaced rather than trusting it with “core” nodes that require much more consideration.
&lt;/p&gt;
&lt;p&gt;
	I did find that getting better at prompting really can improve the results you’re getting.
&lt;/p&gt;
&lt;h2&gt;
	Weird Things
&lt;/h2&gt;
&lt;p&gt;
	Things are changing &lt;em&gt;so&lt;/em&gt;
	 quickly. It’s hard to keep up with new things, what might have been true last month is not true anymore this month. My setup is pretty simple: I mainly use Claude Code and the Claude desktop app.
&lt;/p&gt;
&lt;p&gt;
	I often “feel bad” about deleting code that was just written. The AI will often just write the wrong thing. I take full responsibility for the result (I either need to improve my instructions or write it myself). It’s okay to delete the just-generated code, ignore the responses and start over. However, I do still anthropomorphize the LLM: it’d be hard to tell a human to throw away what they just did, and I still feel a bit bad about it when doing that to the LLM.
&lt;/p&gt;
&lt;p&gt;
	I’ll have the LLM do non-code stuff as well. For example, you can tell Claude Code to create a git commit, to set up parts of your dev environment, and so on.
&lt;/p&gt;
&lt;h2&gt;
	What Doesn’t Work
&lt;/h2&gt;
&lt;p&gt;
	I don’t really believe in “vibe coding” beyond basic prototypes. To build quality non-trivial software, I think you (still?) need to have a very good understanding of what’s happening. For example: I asked Claude Code to add an inspector to an app I’m working on. Rather than using the &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2023/10161&quot;&gt;inspector API&lt;/a&gt;, it generated an HStack. When I specifically told it to use the inspector API, it did do so. I still needed to change things myself. In other words: writing code with AI is absolutely not a fully automated process for me. I don’t shy away from writing code.
&lt;/p&gt;
&lt;p&gt;
	I had some fun with a side project and it looked like things were going well. I was doing TDD and iterating quickly. I got lazy, did not review the code, but trusted my tests. Turns out, the agent had been adding special cases to the code just to make the tests pass.
&lt;/p&gt;
&lt;p&gt;
	Another “fun” thing is that these models are not lossless. For example, I wanted to move some code to a different file. While doing this, Claude Code just hallucinated some new code and changed some of the old code. This becomes hard to spot when the diff gets large (when the diff gets too large, I’ll just undo the change and do stuff myself).
&lt;/p&gt;
&lt;p&gt;
	I had people in my workshop that used an LLM to generate a whole bunch of code that wasn’t working and not using the suggested APIs. Instead of using SwiftUI’s animation system, they animated with a timer. They were solving the wrong problem in the wrong way. The goal of the workshop was understanding, and not getting through the exercises as quickly as possible.
&lt;/p&gt;
&lt;h2&gt;
	You Still Need to Understand What’s Happening
&lt;/h2&gt;
&lt;p&gt;
	I feel like I still need a very strong understanding about the APIs that exist, about how to structure the code and about the mental model behind SwiftUI. My iterations are pretty short. I want to understand &lt;em&gt;exactly&lt;/em&gt;
	 what is happening.
&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/steipete.me&quot;&gt;Peter&lt;/a&gt; seems to have a lot of success with a more hands-off approach, letting his agents run for a very long time.
&lt;/p&gt;
&lt;h2&gt;
	Feedback Loops
&lt;/h2&gt;
&lt;p&gt;
	The current thing I’m thinking about is how we can increase the feedback loop between the agent and me. This is the current loop:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			I prompt the agent to make a change.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			The agent starts working, this often takes a while (30s to a few minutes). The better my prompt is, the quicker the work often goes.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			The agent verifies its own work (by running the tests, compiling the project, etc.)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I need to verify what happened. Because I do a lot of GUI stuff, this often involves running and clicking through the app (or opening different previews in Xcode).
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			At this point, I’ll have three choices: I commit when I’m happy, I iterate to refine the solution, or I start over.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	I think the second step (agent building things) will get much quicker over time. I think the third step (agent verifying its own work) still has a lot of untapped potential. But by far, the slowest part of the loop is me verifying what happened.
&lt;/p&gt;
&lt;h2&gt;
	Opportunities
&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			It’s hard to keep up. A good reliable source of information could be helpful. (I’m considering turning what I’ve learned (and will learn) into a workshop).
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We can build tools to help the agent work more effectively. Linters, type checkers, tests, but possibly also other methods of formal verification.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We can build tools to shorten the feedback loop (how can &lt;em&gt;we&lt;/em&gt;
			 verify the agents’ work more quickly?)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			…
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
	Conclusion
&lt;/h2&gt;
&lt;p&gt;
	I don’t see a future without agentic coding. It feels like we’re just at the start. I think we still need a very strong understanding of what’s happening to be truly effective. It feels like things are changing very quickly, and none of the above might be true in a few days, weeks or months.
&lt;/p&gt;
			</description>
			<pubDate>Tue, 08 Jul 2025 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/agentic-coding</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/agentic-coding</guid>
		</item>
		<item>
			<title>Presentation: Attribute Graph</title>
			<description>
				&lt;p&gt;
	I gave a talk about my understanding of the Attribute Graph. I created a &lt;a href=&quot;http://chris.eidhof.nl/presentations/attribute-graph/&quot;&gt;presentation page&lt;/a&gt; that contains the video, an edited transcript and some references.
&lt;/p&gt;
&lt;p&gt;
	It was really fun creating the talk: I used my “record typing” tool to automate the typing and animate the graph, preview and other bits. The graphs are draw in SwiftUI, but the layout is done in GraphViz.
&lt;/p&gt;
			</description>
			<pubDate>Tue, 01 Jul 2025 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/attribute-graph-presentation</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/attribute-graph-presentation</guid>
		</item>
		<item>
			<title>SwiftUI View Model Ownership</title>
			<description>
				&lt;p&gt;
	When we cover SwiftUI’s state system in &lt;a href=&quot;https://www.swiftuifieldguide.com/workshops/&quot;&gt;our workshops&lt;/a&gt;, we often get asked: &lt;em&gt;How can I set up my view model in a view?&lt;/em&gt;
	 There’s a bit more to this question, so let’s try to spell out the requirements:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			We want our view to create a view model and maintain ownership: when the view goes away, the object should go away.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We want our view model to be an object (not a struct) and the object should use the &lt;a href=&quot;https://developer.apple.com/documentation/observation&quot;&gt;Observation&lt;/a&gt; framework.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	Getting this right is trickier than expected.
&lt;/p&gt;
&lt;p&gt;
	Let’s consider a view model that counts the number of people in a room. Here’s the model definition:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;@Observable class RoomVM {
    let roomName: String
    var count: Int = 0
    init(roomName: String) {
        self.roomName = roomName
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	When we now want to create a &lt;code&gt;RoomView&lt;/code&gt; we are faced with a choice: we need to think about ownership. When the lifetime of our view model is tied to the lifetime of the &lt;code&gt;RoomView&lt;/code&gt;, we say that the &lt;code&gt;RoomView&lt;/code&gt; is the &lt;em&gt;owner&lt;/em&gt;
	 of our object. That means we should use an &lt;code&gt;@State&lt;/code&gt; property. When the view model is passed from the outside, we are not the owner, and we should not use an &lt;code&gt;@State&lt;/code&gt; property.
&lt;/p&gt;
&lt;p&gt;
	In our requirements, we wanted the &lt;code&gt;RoomView&lt;/code&gt; to be the owner. This means we should use an &lt;code&gt;@State&lt;/code&gt; property. My personal rule of thumb is to always mark all &lt;code&gt;@State&lt;/code&gt; properties as private and to always initialize them on the same line as the declaration. For example, for a simple &lt;code&gt;Int&lt;/code&gt; property I’d write:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct CounterView: View {
    @State private var value = 0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	If you are unable to use those two rules (marking as private and setting the initial value), you should either reconsider using a &lt;code&gt;@State&lt;/code&gt; property or you should make sure to pay extra attention to the code you’re writing. In our case, we want an API that looks like &lt;code&gt;RoomView(name: &amp;quot;Main Room&amp;quot;)&lt;/code&gt;.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct RoomView0: View {
    var name: String
    @State var viewModel: RoomVM = // ...
    var body: some View {
        LabeledContent(viewModel.roomName) {
            Stepper(&amp;quot;\(viewModel.count)&amp;quot;, value: $viewModel.count)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
	The init Trap
&lt;/h2&gt;
&lt;p&gt;
	What do we write after the equals sign above? Ideally, we’d write &lt;code&gt;RoomVM(roomName: name)&lt;/code&gt; but that doesn’t compile, because the &lt;code&gt;name&lt;/code&gt; is not available yet. Luckily after a bit of searching, we’ll find a solution somewhere on a blog, forum post or in a video:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct RoomView1: View {
    var name: String
    @State var viewModel: RoomVM
    init(name: String) {
        self.name = name
        self.viewModel = RoomVM(roomName: name)
    }

    var body: some View {
        LabeledContent(viewModel.roomName) {
            Stepper(&amp;quot;\(viewModel.count)&amp;quot;, value: $viewModel.count)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	The code above is broken, and it is not obvious. For example, if you run the following snippet, it works exactly as intended. We can navigate to a room, change the value, and when we navigate away the view model is destroyed.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    var rooms = [&amp;quot;Main Room&amp;quot;, &amp;quot;Breakout&amp;quot;, &amp;quot;Hallway&amp;quot;]
    var body: some View {
        NavigationView {
            List {
                ForEach(rooms, id: \.self) { room in
                    NavigationLink(room) {
                        RoomView1(name: room)
                    }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Let’s now consider a different way of using our &lt;code&gt;RoomView1&lt;/code&gt;:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    var rooms = [&amp;quot;Main Room&amp;quot;, &amp;quot;Breakout&amp;quot;, &amp;quot;Hallway&amp;quot;]
    @State var selectedRoom: String = &amp;quot;Main Room&amp;quot;
    var body: some View {
        VStack {
            RoomView1(name: selectedRoom)
            Picker(&amp;quot;Select a room&amp;quot;, selection: $selectedRoom) {
                ForEach(rooms, id: \.self) { room in
                    Text(room)
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	When we change the counter for a room, then select a different picker value, we never see the &lt;code&gt;RoomView&lt;/code&gt; update: it always will show the initial room (“Main Room”). Why does this happen?
&lt;/p&gt;
&lt;p&gt;
	In our &lt;code&gt;RoomView1&lt;/code&gt;‘s initializer, we’re not actually changing the value of the state property. &lt;em&gt;When we assign to a state property outside of the view’s &lt;code&gt;body&lt;/code&gt;, we are changing the initial value that’s used when that view is created in the &lt;a href=&quot;https://talk.objc.io/episodes/S01E438-attribute-graph-part-10&quot;&gt;attribute graph&lt;/a&gt;.&lt;/em&gt;
	 You can only modify the state’s value inside the body of a view.
&lt;/p&gt;
&lt;p&gt;
	This is why I have that personal rule of always making the state property as private (so no one can assign from the outside) and initializing it straight away (so I’m not allowed to initialize it in the view’s &lt;code&gt;init&lt;/code&gt;). And yet: we cannot do this for our example above.
&lt;/p&gt;
&lt;h2&gt;
	Towards a Fix
&lt;/h2&gt;
&lt;p&gt;
	There’s no one perfect way to solve this, but here’s one approach. Because we have a dependency on &lt;code&gt;name&lt;/code&gt; in our view model expression, we also need to add an &lt;code&gt;onChange(of:)&lt;/code&gt;. Each time the name changes, we create a new view model.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct RoomView2: View {
    var name: String
    @State var viewModel: RoomVM
    init(name: String) {
        self.name = name
        self.viewModel = RoomVM(roomName: name)
    }

    var body: some View {
        LabeledContent(viewModel.roomName) {
            Stepper(&amp;quot;\(viewModel.count)&amp;quot;, value: $viewModel.count)
        }
        .onChange(of: name) {
            self.viewModel = RoomVM(roomName: name)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Another way to think about this is that the &lt;code&gt;name&lt;/code&gt; uniquely determines the identity of our &lt;code&gt;RoomView2&lt;/code&gt;. When that name changes, the identity changes and we should recreate our view model. The code above works as expected in all scenarios. It is not quite there yet, though. After I published this article, Kyle asked the following question:
&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;
		@chris In the fixed example, is it correct to say that an instance of the view model object will be needlessly created each time the view’s initializer is called by the parent? As in: when you change the selected room in the parent, the child’s initializer is run, name is set to the new name, the view model object is created and then not used (because of the attribute graph as you mentioned), and then the “original” view model is replaced by a third inside of onChanged?
	&lt;/p&gt;
	&lt;p&gt;&lt;a href=&quot;https://m.objc.io/@kyle@mister.computer/114461147374335228&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
	Kyle is absolutely right. The example above does have the correct behavior, but unnecessarily creates and discards new objects everytime the initializer runs.
&lt;/p&gt;
&lt;h2&gt;
	A Final Solution?
&lt;/h2&gt;
&lt;p&gt;
	Here’s a variant that creates the &lt;code&gt;RoomVM&lt;/code&gt; once when the view appears, and only recreates when the &lt;code&gt;name&lt;/code&gt; property changes:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct RoomView3: View {
    var name: String
    @State private var viewModel: RoomVM?

    var body: some View {
        ZStack {
            if let viewModel {
                RoomView3Helper(viewModel: viewModel)
            }
        }
        .onChange(of: name, initial: true) {
            self.viewModel = RoomVM(roomName: name)
        }
    }
}

struct RoomView3Helper: View {
    @Bindable var viewModel: RoomVM

    var body: some View {
        LabeledContent(viewModel.roomName) {
            Stepper(&amp;quot;\(viewModel.count)&amp;quot;, value: $viewModel.count)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	The code is way less clean than what we started with, but at least it’s correct and efficient. I wonder if there’s an cleaner way to write the code above, or if this is really what we need to resort to.
&lt;/p&gt;
&lt;h2&gt;
	Conclusion
&lt;/h2&gt;
&lt;p&gt;
	One of the hardest parts about this problem is that, initially, our code seemed to work correctly. It seemed to just do the right thing. It’s hard to catch this problem during testing, but as long as you stick to the private/initial value rules, you’ll never have that problem. If you do need to break the rule, pay extra attention and add on &lt;code&gt;onChange(of:)&lt;/code&gt; for every property that your view model depends on.
&lt;/p&gt;
&lt;h2&gt;
	Updates
&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;May 7&lt;/em&gt;
	: Added a version that doesn’t recreate the model every single time the `init runs.
&lt;/p&gt;
			</description>
			<pubDate>Tue, 06 May 2025 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/swiftui-view-model</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/swiftui-view-model</guid>
		</item>
		<item>
			<title>SwiftUI Alignment Guide Bug</title>
			<description>
				&lt;p&gt;
	For the last few years SwiftUI’s &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/alignment/&quot;&gt;alignment guides&lt;/a&gt; have been broken in combination with &lt;code&gt;if&lt;/code&gt;-statements. Here’s a small example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    var value = true
    var body: some View {
        Color.green
            .frame(width: 100, height: 100)
            .overlay(alignment: .topLeading) {
                if true {
                    Circle()
                        .alignmentGuide(.leading) { $0.width/2 }
                }
            }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/swiftui-alignment-guide-bug/1-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/swiftui-alignment-guide-bug/1.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	I expected the horizontal center of the circle to be aligned with the leading edge of the green color. Instead, both views are centered on top of each other. When you remove the &lt;code&gt;if&lt;/code&gt; it works as expected. If you replace the &lt;code&gt;if&lt;/code&gt; with an &lt;code&gt;if/else&lt;/code&gt; it’s still broken, but if you replace the &lt;code&gt;if&lt;/code&gt; with a &lt;code&gt;switch&lt;/code&gt; it does work as expected.
&lt;/p&gt;
&lt;p&gt;
	Depending on your use case you can also replace the &lt;code&gt;if&lt;/code&gt; statement with an opacity modifier or something similar.
&lt;/p&gt;
&lt;p&gt;
	(&lt;em&gt;FB13676056&lt;/em&gt;
	 for Apple folks. Last tested on Xcode 16.3).
&lt;/p&gt;
			</description>
			<pubDate>Mon, 05 May 2025 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/swiftui-alignment-guide-bug</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/swiftui-alignment-guide-bug</guid>
		</item>
		<item>
			<title>Bindings</title>
			<description>
				&lt;p&gt;
	In SwiftUI, there are two &lt;em&gt;kinds&lt;/em&gt;
	 of bindings. There are bindings created using keypaths, and then there are bindings created using &lt;code&gt;Binding(get:set:)&lt;/code&gt;. These are not the same at all.
&lt;/p&gt;
&lt;p&gt;
	For example, consider the following (contrived) view:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    @State var value1 = false
    @State var value2 = false
    var body: some View {
        VStack {
            Toggle(&amp;quot;Test&amp;quot;, isOn: $value1)
            Nested(value2: $value2)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	When we change either &lt;code&gt;value1&lt;/code&gt; or &lt;code&gt;value2&lt;/code&gt;, the &lt;code&gt;body&lt;/code&gt; of &lt;code&gt;ContentView&lt;/code&gt; will re-render. This is expected. However, we only want &lt;code&gt;Nested&lt;/code&gt; to re-render its body when &lt;code&gt;value2&lt;/code&gt; changes, not when &lt;code&gt;value1&lt;/code&gt; changes.
&lt;/p&gt;
&lt;p&gt;
	Under the hood, SwiftUI looks at the &lt;code&gt;Nested&lt;/code&gt; value in the attribute graph and compares it against the new value of &lt;code&gt;Nested&lt;/code&gt; that we’re constructing above. If these are “the same”, it will not re-render the body of &lt;code&gt;Nested&lt;/code&gt;. It is not documented how this comparison works, but Javier &lt;a href=&quot;https://swiftui-lab.com/equatableview/&quot;&gt;found out some things&lt;/a&gt; and there are some old tweets by SwiftUI team members. SwiftUI compares the old and new view on a field-by-field basis, and only if all fields are the same, it stops re-rendering.
&lt;/p&gt;
&lt;p&gt;
	In the example above, SwiftUI can do this comparison, and indeed, the &lt;code&gt;body&lt;/code&gt; of &lt;code&gt;Nested&lt;/code&gt; will not be re-rendered unless the actual value of &lt;code&gt;value2&lt;/code&gt; changed.
&lt;/p&gt;
&lt;h2&gt;
	Manual Binding Problems
&lt;/h2&gt;
&lt;p&gt;
	Instead of writing &lt;code&gt;$value2&lt;/code&gt;, we could have also constructed a &lt;em&gt;manual binding&lt;/em&gt;
	 using &lt;code&gt;Binding(get: { value2 }, set: { value2 = $0 })&lt;/code&gt;. This has a different behavior: every time &lt;code&gt;ContentView&lt;/code&gt; re-renders its body, &lt;code&gt;Nested&lt;/code&gt; will re-render its body as well. Even when only &lt;code&gt;value1&lt;/code&gt; changes. While we don’t have access to the SwiftUI source code, I think the problem is that these manual bindings store closures instead of a “pointer” to the state value. Every time the body of &lt;code&gt;ContentView&lt;/code&gt; executes, a new closure is constructed. Swift cannot compare closures and thus SwiftUI needs to re-render the body of &lt;code&gt;Nested&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
	While the above is a contrived example (no one would write &lt;code&gt;Binding(get:set:)&lt;/code&gt; instead of &lt;code&gt;$value2&lt;/code&gt;) the distinction between binding types becomes important when creating member bindings. For example, in &lt;a href=&quot;http://chris.eidhof.nl/post/swiftui-binding-tricks/&quot;&gt;SwiftUI Binding Tricks&lt;/a&gt; we look at creating a binding of &lt;code&gt;Bool&lt;/code&gt; from a state property of type &lt;code&gt;Set&lt;/code&gt;. While it might be easier to write this using a &lt;code&gt;Binding(get:set:)&lt;/code&gt; we do create a potential efficiency trap. When you write something like &lt;code&gt;$selection[contains: element]&lt;/code&gt; a binding with a keypath is constructed, and SwiftUI can compare these kinds of bindings effectively. At least one of the companies we’ve worked with has documentation and warnings in place because using &lt;code&gt;Binding(get:set:)&lt;/code&gt; caused way too many view body redraws.
&lt;/p&gt;
&lt;h2&gt;
	Conclusion
&lt;/h2&gt;
&lt;p&gt;
	I think we should avoid &lt;code&gt;Binding(get:set:)&lt;/code&gt; in production code. In most cases, you will probably not see a big difference in performance, but it can come back to bite you. With some practice, bindings using key paths rather than &lt;code&gt;Binding(get:set:)&lt;/code&gt; are just as easy to write and often simplify testing.
&lt;/p&gt;
&lt;h2&gt;
	References
&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			Jacob Van Order wrote an article where he &lt;a href=&quot;https://jacobvanorder.github.io/swiftui-bindings-digging-a-little-deeper/&quot;&gt;measures the different approaches&lt;/a&gt; using the SwiftUI Instruments templates.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
			</description>
			<pubDate>Fri, 21 Mar 2025 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/binding-with-get-set</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/binding-with-get-set</guid>
		</item>
		<item>
			<title>Why I Avoid Group</title>
			<description>
				&lt;p&gt;
	In &lt;a href=&quot;https://www.swiftuifieldguide.com/workshops/&quot;&gt;our SwiftUI workshops&lt;/a&gt;, we often see people reaching for the &lt;code&gt;Group&lt;/code&gt; view. There’s a lot of code out there that does this, and yet, I noticed myself avoiding &lt;code&gt;Group&lt;/code&gt;, even though it can be pretty handy. In investigating, I realized that it’s not even &lt;code&gt;Group&lt;/code&gt; that is the problem. It seems to be the meeting point of SwiftUI and UIKit.
&lt;/p&gt;
&lt;p&gt;
	In my understanding, &lt;code&gt;Group&lt;/code&gt; is just a way to get view builder syntax, but doesn’t really add any “structure” or “container” node.
&lt;/p&gt;
&lt;p&gt;
	In SwiftUI, when you have an &lt;code&gt;if/else&lt;/code&gt; statement and want to apply a modifier to that, it won’t compile:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;if let image {
    Image(image)
} else {
    Text(&amp;quot;Loading…&amp;quot;)
}
.onAppear {  } /* does not compile */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	You can fix this by wrapping everything in a &lt;code&gt;Group&lt;/code&gt;:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Group {
    if let image {
        Image(image)
    } else {
        Text(&amp;quot;Loading…&amp;quot;)
    }
}
.onAppear {  } /* works */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	So far, so good. And yet, every time I see this it makes me uneasy, because &lt;code&gt;Group&lt;/code&gt; has such strange, unpredictable behavior. For some reason, it always seems to come back and bite me. However, I couldn’t really put my finger on it. In this post, I’ve boiled down the problem, so that in the future, I have an explanation that I can &lt;a href=&quot;https://simonwillison.net/2024/Jul/13/give-people-something-to-link-to/&quot;&gt;link to&lt;/a&gt;.
&lt;/p&gt;
&lt;h2&gt;
	Group Variadics
&lt;/h2&gt;
&lt;p&gt;
	You can also use &lt;code&gt;Group&lt;/code&gt; to apply some modifiers to &lt;em&gt;each&lt;/em&gt;
	 of the subviews rather than to the group as a whole. For example, you can apply padding and a background to each of the elements in a &lt;code&gt;Group&lt;/code&gt;:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Group {
    Text(&amp;quot;One&amp;quot;)
    Text(&amp;quot;Two&amp;quot;)
}
.padding()
.background(.blue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	If you create a new Xcode project and add this as the &lt;code&gt;body&lt;/code&gt; of your &lt;code&gt;ContentView&lt;/code&gt;, it will look like this in the previews:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/why-i-avoid-group/1-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/why-i-avoid-group/1.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	However, if you then run that very same app in the Simulator, it looks very different:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/why-i-avoid-group/3-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/why-i-avoid-group/3.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	The complete difference in behavior above is the reason why I avoid &lt;code&gt;Group&lt;/code&gt;.  From my interpretation, the &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/group&quot;&gt;Group documentation page&lt;/a&gt; makes it clear that the preview behavior is correct, and the Simulator behavior is a bug.
&lt;/p&gt;
&lt;p&gt;
	Some modifiers do seem to work differently. In the official documentation, it says:
&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;
		The modifier applies to all members of the group — and not to the group itself. For example, if you apply onAppear(perform:) to the above group, it applies to all of the views produced by the if isLoggedIn conditional, and it executes every time isLoggedIn changes.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
	In my testing, I saw a different behavior, it only called &lt;code&gt;onAppear&lt;/code&gt; once. If I understand the document correctly, the code below would print twice (and yet it doesn’t):
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Group {
    Text(&amp;quot;One&amp;quot;)
    Text(&amp;quot;Two&amp;quot;)
}
.onAppear {
    print(&amp;quot;Appear&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	It seems that the behavior not only differs between simulator and previews, but also between different modifiers.
&lt;/p&gt;
&lt;h2&gt;
	Aside: View Lists
&lt;/h2&gt;
&lt;p&gt;
	Before we look at the problem, let’s consider some theory. If we look at the definition of (say) &lt;code&gt;HStack&lt;/code&gt;, we’ll see that it’s generic over a single &lt;code&gt;Content&lt;/code&gt; parameter that conforms to &lt;code&gt;View&lt;/code&gt;. Looking at the type, we could say that an &lt;code&gt;HStack&lt;/code&gt; has a single subview. But clearly we know that an &lt;code&gt;HStack&lt;/code&gt; has multiple subviews!
&lt;/p&gt;
&lt;p&gt;
	The &lt;code&gt;HStack&lt;/code&gt; receives a single type that conforms to the &lt;code&gt;View&lt;/code&gt; protocol, but it can &lt;em&gt;flatten&lt;/em&gt;
	 that into a list of subviews. For example, the two texts in the group above turn into a &lt;code&gt;TupleView&amp;lt;(Text, Text)&amp;gt;&lt;/code&gt;. The HStack can flatten the tuple view to get a list of the two subviews. A few years ago I wrote more about how &lt;a href=&quot;https://chris.eidhof.nl/post/swiftui-views-are-lists/&quot;&gt;SwiftUI Views are Lists&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	When a flattened view list turns out to be a single item it’s called a &lt;em&gt;unary view&lt;/em&gt;
	, and if it’s zero or more items, it’s a &lt;em&gt;multiview&lt;/em&gt;
	. You can also read about this in &lt;a href=&quot;https://movingparts.io/variadic-views-in-swiftui&quot;&gt;Robb’s post&lt;/a&gt; or my own post on &lt;a href=&quot;https://chris.eidhof.nl/post/variadic-views/&quot;&gt;variadic views&lt;/a&gt;.
&lt;/p&gt;
&lt;h2&gt;
	Investigating the Problem
&lt;/h2&gt;
&lt;p&gt;
	At first, I thought the problem was with &lt;code&gt;Group&lt;/code&gt;. But it seems to be a problem with the “root view” that renders a SwiftUI view. I believe (but haven’t verified) that ultimately, at the very root of our app, there is still some UIKit that renders our root view. If that root view is not a &lt;em&gt;unary view&lt;/em&gt;
	, the behavior can be unexpected.
&lt;/p&gt;
&lt;p&gt;
	For example, with the code below, the root view is not unary but actually returns two views:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Group {
    Text(&amp;quot;One&amp;quot;)
    Text(&amp;quot;Two&amp;quot;)
}
.padding()
.background(.blue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	We can see the exact same behavior difference between previews and the Simulator when we replace the &lt;code&gt;Group&lt;/code&gt; with an explicit view builder:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    var body: some View {
        helper
            .padding()
            .background(.blue)
    }

    @ViewBuilder var helper: some View {
        Text(&amp;quot;One&amp;quot;)
        Text(&amp;quot;Two&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	To fix the differences in behavior, we can just wrap our &lt;code&gt;body&lt;/code&gt; in a &lt;code&gt;VStack&lt;/code&gt;. This way, the &lt;code&gt;VStack&lt;/code&gt; is the new, stable, unary root view and SwiftUI will have no problems rendering this as expected:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;VStack {
    helper
        .padding()
        .background(.blue)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Wrapping in a &lt;code&gt;VStack&lt;/code&gt; works with both the view builder variant as well as the &lt;code&gt;Group&lt;/code&gt;, which seems to confirm that &lt;code&gt;Group&lt;/code&gt; is really just a way to get view builder syntax, nothing more.
&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;
		Note: The &lt;code&gt;onAppear&lt;/code&gt; problem still exists: if you replace the padding and background with an &lt;code&gt;onAppear&lt;/code&gt;, it’ll still only get called once for the entire group. At least this behavior is consistent between the Simulator and previews, and between &lt;code&gt;Group&lt;/code&gt; and view builders.
	&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
	Other Possible Problems
&lt;/h2&gt;
&lt;p&gt;
	If my hunch is correct, it might be a problem where UIKit meets SwiftUI. There are actually a few places where this happens. Many of the builtin components still use UIKit under the hood and could be a candidate for this behavior. For example, let’s try navigation stacks:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;NavigationStack {
    Group {
        Text(&amp;quot;One&amp;quot;)
        Text(&amp;quot;Two&amp;quot;)
    }
    .padding()
    .background(.blue)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	This renders as expected: the modifiers are applied to the items and not to the group as a whole.
&lt;/p&gt;
&lt;p&gt;
	Sheets are broken, though, ImageRenderer is broken and UIHostingView doesn’t work either.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Text(&amp;quot;Hello&amp;quot;)
    .sheet(isPresented: .constant(true)) {
        Group {
            Text(&amp;quot;One&amp;quot;)
            Text(&amp;quot;Two&amp;quot;)
        }
        .padding()
        .background(.blue)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Again, for these broken cases you can fix the behavior by having a stable unary view as the root. I haven’t tested all of the framework, but I expect there to be more broken UIKit-wrapping containers.
&lt;/p&gt;
&lt;h2&gt;
	Conclusion
&lt;/h2&gt;
&lt;p&gt;
	I think the behavior of &lt;code&gt;Group&lt;/code&gt; (or to be more precise: applying modifiers to lists of views) is just too unreliable to use in production. Why does it differ between the Simulator and previews? Why does &lt;code&gt;onAppear&lt;/code&gt; on a list get called once, but the background gets applied to each item?
&lt;/p&gt;
&lt;p&gt;
	For me, I’m avoiding &lt;code&gt;Group&lt;/code&gt; where possible, and always choose for “stable containers” such as a stack (&lt;code&gt;VStack&lt;/code&gt; and &lt;code&gt;ZStack&lt;/code&gt; are my favorite, for some strange reason, &lt;code&gt;HStack&lt;/code&gt; feels wrong). Going back to the initial example, I would write it like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;VStack {
    if let image {
        Image(image)
    } else {
        Text(&amp;quot;Loading…&amp;quot;)
    }
}
.onAppear {  } /* works */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Note: all of this is tested with iOS 18.2, hopefully some of this will be fixed in the future.
&lt;/p&gt;
			</description>
			<pubDate>Wed, 19 Mar 2025 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/why-i-avoid-group</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/why-i-avoid-group</guid>
		</item>
		<item>
			<title>SwiftUI Phase Animation &quot;Bug&quot;</title>
			<description>
				&lt;p&gt;
	I noticed that phase animators weren’t behaving as expected, and I initially assumed I’d found a bug in SwiftUI. It took me way too long to realize the problem here, that’s why I am writing this up. Spoiler alert: &lt;em&gt;there is no bug&lt;/em&gt;
	.
&lt;/p&gt;
&lt;p&gt;
	I am preparing a workshop on SwiftUI Animations (this is a follow-up to our regular &lt;a href=&quot;https://www.swiftuifieldguide.com/workshops/&quot;&gt;SwiftUI Workshop&lt;/a&gt;). As I went through the exercises, I created a very minimal shake animation to demo how phase animators work.
&lt;/p&gt;
&lt;p&gt;
	A phase animator lets you animate between multiple phases (in the example below, the initial phase is 0, the second phase is 20 and the third phase -20). It starts by displaying the view at its initial phase. When we change the trigger value, it animates to the second phase. When that animation completes, it animates to the third phase. Finally, it animates back to the initial phase. This is essentially a really nice way to run nested animations in completion handlers. In the animation closure, you get the &lt;em&gt;target phase&lt;/em&gt;
	 in and can choose which animation curve you want to animate towards that value.
&lt;/p&gt;
&lt;p&gt;
	Here’s my attempt at trying to create a shake animation with a custom timing curve for the first part of the animation. I exaggerated the curve so that it’s really clear that this doesn’t work:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    @State var trigger = 0
    var body: some View {
        Button(&amp;quot;Hello&amp;quot;) {
            trigger += 1
        }.phaseAnimator([0, 20, -20], trigger: trigger) {
            $0.offset(x: $1) // somehow always animates with the default animation
        } animation: { phase in
            switch phase {
            case 20: .linear(duration: 5)
            default: .default
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	If you run the example above, you can even set a breakpoint and see that the &lt;code&gt;linear&lt;/code&gt; animation gets used. What’s more, you can add a &lt;code&gt;transaction { print($0.animation) }&lt;/code&gt; to the content closure, and you’ll see the correct animation printed out. Yet it does not animate slowly.
&lt;/p&gt;
&lt;p&gt;
	The problem has two causes:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			SwiftUI buttons have an implicit animation going on. This happens even with a custom &lt;code&gt;ButtonStyle&lt;/code&gt;. I haven’t verified this, but I think it animates when you depress a button (when &lt;code&gt;isPressed&lt;/code&gt; changes back to false).
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			Layout modifiers such as &lt;code&gt;offset&lt;/code&gt; are applied at the leaf nodes in the view tree (in this case, the actual button). In other words, the &lt;code&gt;offset&lt;/code&gt; itself does not animate, but instead, the &lt;code&gt;x&lt;/code&gt; position of the button animates.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	As far as I’m aware, the button animation behavior is not documented. The layout behavior is underdocumented and could be much clearer. There are a number of solutions: the easiest is to apply a &lt;code&gt;geometryGroup&lt;/code&gt; before the &lt;code&gt;offset&lt;/code&gt;. This causes the offset to apply to the group as a whole, rather than being applied at the leaf views. Interestingly, the documentation of &lt;code&gt;geometryGroup&lt;/code&gt; actually explains that position and size are set at the leaf views.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    @State var trigger = 0
    var body: some View {
        Button(&amp;quot;Hello&amp;quot;) {
            trigger += 1
        }.phaseAnimator([0, 20, -20], trigger: trigger) {
            $0
                .geometryGroup() // this now animates as a whole rather than at the leaf views
                .offset(x: $1)
        } animation: { phase in
            switch phase {
            case 20: .linear(duration: 5)
            default: .default
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	The geometry group above now animates its frame and uses the animation it receives from the current transaction (the five second linear animation). Internally, the button animates its pressed state but that doesn’t influence the position anymore.
&lt;/p&gt;
&lt;p&gt;
	Alternatively, for my purposes (demoing phase animators) I could use an &lt;code&gt;onTapGesture&lt;/code&gt; instead of a button, as I don’t need all the extra stuff that button provides (highlighting, styling and accessibility). Or use a different modifier than &lt;code&gt;offset&lt;/code&gt;, such as rotation or scale (these don’t apply at the leaf nodes).
&lt;/p&gt;
&lt;p&gt;
	This is not the first time I’ve been bitten by the default button animations, and probably not the last. Hopefully writing this post will help me remember in the future.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 03 Mar 2025 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/swiftui-phase-animation-bug</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/swiftui-phase-animation-bug</guid>
		</item>
		<item>
			<title>Weeknotes № 52</title>
			<description>
				&lt;p&gt;
	Just to be consistent I’ll add the notes for this week as well. Mostly had family time and managed to put in a few longer but very cold bike rides.
&lt;/p&gt;
&lt;p&gt;
	We took the train to The Netherlands, the bike rides here are cold as well. I rented a gravel bike which is really nice (even though the brakes don’t really work all that well, so I’ll bring my own bike next time).
&lt;/p&gt;
&lt;p&gt;
	I’ve spent a bit of time on preparing upcoming workshops, we recorded another Swift Talk episode and I played around a bit with Helix. For Helix, I installed &lt;a href=&quot;https://github.com/artempyanykh/marksman&quot;&gt;Marksman&lt;/a&gt; to get nice Markdown autocompletion. It supports wiki-like syntax so that I can edit my Zettelkasten notes as well (although I prefer the more integrated workflow of The Archive).
&lt;/p&gt;
			</description>
			<pubDate>Mon, 30 Dec 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-52</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-52</guid>
		</item>
		<item>
			<title>2024 in Review</title>
			<description>
				&lt;p&gt;
	This was a fun and busy year that flew by. At a personal level, a lot has happened (the oldest started school, we went on a bicycle holiday, and I started therapy again.)
&lt;/p&gt;
&lt;p&gt;
	Work-wise, the biggest thing is that I started a new company in addition to objc.io. This is the new home for our workshops as well as new projects.
&lt;/p&gt;
&lt;p&gt;
	The first project under the new company is the &lt;a href=&quot;https://www.swiftuifieldguide.com&quot;&gt;SwiftUI Field Guide&lt;/a&gt;. This is a website that tries to show how the SwiftUI layout system works by providing interactive examples. A lot of work went into it, and I’m very proud of how it turned out. I essentially reimplemented (a small part of) SwiftUI in TypeScript. It’s what I wished SwiftUI documentation would be like: way more visual and interactive. I went into all kinds of rabbit holes in order to build this. For example, just trying to implement gradients (which are used in one or two places) sent me off deep into color space land where I learned about &lt;a href=&quot;https://bottosson.github.io/posts/oklab/&quot;&gt;OKlab&lt;/a&gt; and other things.
&lt;/p&gt;
&lt;p&gt;
	I gave presentations in Hamburg, Prague, Cupertino, Paris and Bologna. They focused on the SwiftUI Layout system as well as animations. For the newer presentations, I used a new tool that lets me record me typing (during preparation) and play it back smoothly (during the actual presentation) while making sure previews are directly visible. This has been a lot of fun to work on. I used that same tool in my recent videos on Bluesky and Mastodon to give one-minute overviews of SwiftUI topics.
&lt;/p&gt;
&lt;p&gt;
	I held workshops at companies like DKB, Rossmann, Dexcom, Etsy, Wallapop, Sketch, Atlassian, Amex and StarFinanz. The learning has been tremendous from all sides – obviously the goal of a workshop is that the attendees learn, yet I learn a lot as well. It’s been really great doing more in-person workshops this year.
&lt;/p&gt;
&lt;p&gt;
	Except for Cupertino I traveled everywhere by train: London, Paris, Bologna and within Germany. It felt good to do that and I was able to use a lot of that time productively (I find that much harder when traveling by car or plane).
&lt;/p&gt;
&lt;p&gt;
	I moved to &lt;a href=&quot;https://jj-vcs.github.io/jj/latest/&quot;&gt;jujutsu&lt;/a&gt; over the last months as my main way of interacting with Git, although I still love &lt;a href=&quot;https://retcon.app&quot;&gt;Retcon&lt;/a&gt;. Both of these make rewriting history a lot simpler. With jujutsu, even the mental model is greatly simplified compared to regular git, which really helps me. Beyond that, I haven’t used a lot of new technology: I did write a lot of TypeScript in VSCode which was okay but I still strongly prefer Swift and Xcode. As an experiment, I’m using the helix editor to write this post, I do feel it has the potential to be a vim replacement for me. One new workflow I’ve gotten used to is using the Zettelkasten note taking strategy (using &lt;a href=&quot;https://zettelkasten.de/the-archive/&quot;&gt;The Archive&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
	At objc.io, we recorded weekly Swift Talk episodes and moved our office from Berlin to Fürstenberg. Our Berlin studio had water damage that the landlord wasn’t interested in fixing, and after half a year we had enough of that. For me, it also means I can actually cycle to and work from an office, which feels nice (I’ve worked from home for almost all of the last twenty years).
&lt;/p&gt;
&lt;p&gt;
	Out of all the code I wrote this year, maybe the &lt;a href=&quot;https://github.com/chriseidhof/dynamic-type&quot;&gt;Dynamic Type&lt;/a&gt; package has been the simplest and most useful. I’m using this package in my presentations, in our Workshop app and for a number of internal tools. It’s been pretty incredible to just have iOS-like dynamic type (including things like ScaledMetric) everywhere. During a presentation, I can increase or decrease the font size. When I’m demoing the workshop app in a conference room at a client, I can just scale things up and down where needed.
&lt;/p&gt;
&lt;p&gt;
	Ever since getting back from our cycling holiday I’ve had a foot injury, I think because I walked on flip-flops too much. While I am now mostly pain-free, I still have issues when running. Somewhere towards the end of summer, I switched to cycling, mostly gravel but some road cycling as well. Running has been a massive part of my identity for the last twenty years, but it’s been surprisingly easy and fun to replace it with cycling. I’m not quite sure what 2025 will look like exercise-wise. If I can keep up the cycling, I do want to do a longer bikepacking trip.
&lt;/p&gt;
&lt;p&gt;
	Here’s to a fun and productive 2025!
&lt;/p&gt;
			</description>
			<pubDate>Tue, 24 Dec 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-review</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-review</guid>
		</item>
		<item>
			<title>Weeknotes № 51</title>
			<description>
				&lt;p&gt;
	Last week I finished almost all preparation for the first workshop of next year. There was a weird crash in the Workshop app. This app has evolved a lot over the last few years, and I didn’t quite understand the reason it was crashing (duplicate symbols?). I did remove the last remaining static framework by changing it into a Swift package and that finally got rid of the crash.
&lt;/p&gt;
&lt;p&gt;
	We researched more attribute graph stuff for &lt;a href=&quot;https://talk.objc.io&quot;&gt;Swift Talk&lt;/a&gt;. There are six episodes already and we could easily do ten more, but not sure yet where we’ll draw the line. It’d definitely be fun to do state management, the environment, preferences, etc.
&lt;/p&gt;
&lt;p&gt;
	I thought more about some patterns that I’ve used over the years: defunctionalization, explicit witnesses and incremental programming systems. I also have some more ideas written down about the incremental static site generator I’d like to build. I experimented a bit with some of those topics, hopefully I’ll be able to at least write about some of that.
&lt;/p&gt;
&lt;p&gt;
	I created four more one-minute videos:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3ldftzlvzxc2m&quot;&gt;Basic Animations&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3ldiqmhcsys2z&quot;&gt;Phase Animations&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3ldkwkcr5322k&quot;&gt;Keyframe Animations&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3ldnv7ikcdk2z&quot;&gt;Animatable&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	I’ve been thinking a bit about how to build a workflow system in Swift. This is a system that would have long-running tasks (think days or months) with discrete steps that also include user-input. For example: an email arrives, triggers a new workflow instance, some automated stuff happens but before a reply gets sent I get to review and edit it. I’d like to come up with a simple core model for describing these workflows, but it turns out to not be all that easy. I think I’ll ultimately have to go for a graph structure as I’d want forks and joins in the workflows. In writing about it just now, I realized I should start with a simpler (non-persistent) implementation to test out what the API would feel like.
&lt;/p&gt;
&lt;p&gt;
	I started reading “Stories Sell” by Matthew Dicks. So far it seems quite interesting.
&lt;/p&gt;
&lt;p&gt;
	I went for two longer gravel rides on the weekend: one was 53km and the other one 86km. It’s definitely more challenging in low temperatures, on the longer one I even got rained on quite a bit. I did bring an extra jacket and a thermos flask of tea, next time I’ll bring a spare pair of dry gloves as well. I rode some beautiful new (to me) trails.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 23 Dec 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-51</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-51</guid>
		</item>
		<item>
			<title>Weeknotes № 50</title>
			<description>
				&lt;p&gt;
	Last week I again tried to not focus too much on work, and instead went to Berlin to meet friends and get my passport renewed. I also played my first theatre role in almost thirty years. The previous role was at the closing play of primary school, this time it was at the youngest’s day care.
&lt;/p&gt;
&lt;p&gt;
	I put out new videos last week with a focus on alignment:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3lcuimlkuhs2a&quot;&gt;Aligning stacks, frames and overlays&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3lcwqelejhs2b&quot;&gt;First Text Baseline alignment&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3lczc2omr622z&quot;&gt;Explicit Alignment Guides&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3ld3zsqzi6s2y&quot;&gt;Sizing of ZStack vs overlay&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3ld6jo2xk5s22&quot;&gt;Aligning custom icons&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	I am still going strong on the Zettelkasten note taking method. My note with attribute graph questions is getting quite long, hopefully at some point I’ll be able to ask someone about it.
&lt;/p&gt;
&lt;p&gt;
	I read a bit about &lt;a href=&quot;http://peterfadde.com/Research/Deliberate_Performance-PI-1011.pdf&quot;&gt;deliberate performance&lt;/a&gt;. In short, you can increase performance by:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;strong&gt;Experimenting&lt;/strong&gt;
			. Form hypotheses and these these out.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;strong&gt;Estimating&lt;/strong&gt;
			. How long will this take me? How big / expensive will this thing take me?
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;strong&gt;Extrapolition&lt;/strong&gt;
			. How can you apply the learned things to other areas? How does this concept generalize?
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;
			 Writing, teaching, etc.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	It’s fun to see how we apply these in our workshops as well. We give a quick intro, let the attendees solve a solution, have them explain their solution and then try to discuss the theory or what it means in the abstract.
&lt;/p&gt;
&lt;p&gt;
	I read more about &lt;a href=&quot;https://www.pathsensitive.com/2019/07/the-best-refactoring-youve-never-heard.html&quot;&gt;defunctionalization&lt;/a&gt;. We also &lt;a href=&quot;https://www.objc.io/blog/2019/09/10/defunctionalization/&quot;&gt;wrote about this&lt;/a&gt; in 2019. It’s been a pattern I keep seeing everywhere: in the Elm Architecture, in TCA and while thinking about building virtual machines (you can start with a naive functional implementation of whatever it is you want to build and then use CPS + defunctionalization to build a very efficient iterative implementation).
&lt;/p&gt;
&lt;p&gt;
	I’ve been thinking about using the stuff I learned about the attribute graph implementation to take yet another stab at an incremental static site generator (just for fun). Not sure when I’ll have time for that.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 16 Dec 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-50</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-50</guid>
		</item>
		<item>
			<title>Weeknotes № 49</title>
			<description>
				&lt;p&gt;
	Last week was more personal stuff and less work. I spent a morning teaching a zine workshop to primary school kids, which was really fun. One of our kids was sick and I had to take care of her for a day, which only left three short days of work time. I spent an evening rehearsing a short play with other parents for the day care. I think the last time I was in a play was almost thirty years ago.
&lt;/p&gt;
&lt;p&gt;
	Because of weather and responsibilities, I cycled indoors quite a bit (instead of in the forest). This is definitely better than running on the treadmill (which I used to do a few years ago). A lot more comfortable and not as loud.
&lt;/p&gt;
&lt;p&gt;
	I recorded short videos and posted them on Bluesky and Mastodon (hope to keep doing that for the rest of December):
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3lccp3fl2xs2z&quot;&gt;How to use Flexible Frames&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3lcf64ao7vk2n&quot;&gt;Image Resizing and Aspect Ratio&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3lchrl3jtbs2v&quot;&gt;Scaled Metric&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;&lt;a href=&quot;https://bsky.app/profile/eidhof.nl/post/3lcmrzsuyl22u&quot;&gt;Text&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	I spent more time figuring out how the attribute graph works. At the same time, I tried porting some of GraphViz’s layout algorithm to SwiftUI.
&lt;/p&gt;
&lt;p&gt;
	I had a call with Nathan from &lt;a href=&quot;https://retcon.app&quot;&gt;Retcon&lt;/a&gt;. We talked about a bunch of stuff, but one quote really stuck with me: “when designing puzzles in games, the designers want people to try the wrong solution first”. I always feel anytime we make a mistake and later do it right, learning is much better. Maybe I could use this as inspiration for my teaching.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 09 Dec 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-49</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-49</guid>
		</item>
		<item>
			<title>Weeknotes № 48</title>
			<description>
				&lt;p&gt;
	Last week Florian and me taught a workshop in Hamburg. While I’m a fluent German speaker it’s definitely still a lot less fluent than my English and always a bit of a (fun) challenge. We got there Sunday night, and the offices (and our hotel) was in a business part of the city. We wanted to eat out for dinner and tried to find a local food court that we saw on the map. We expected to find a number of restaurants with different cuisines, and when we got there, there was just a single restaurant. After a loop around the block it turned out to be a single restaurant with many kinds of cuisines. It wasn’t horrible and turned out to be a fun story. The contrast to my London hotel couldn’t be bigger: the rooms were a quarter of the price, absolutely &lt;em&gt;massive&lt;/em&gt;
	 and included a lot more amenities, even breakfast.
&lt;/p&gt;
&lt;p&gt;
	On the way back there were massive delays in the train system, so after my train got cancelled I took a completely different route home. This also came with massive delays during the ride, which then turned out to be quite productive (luckily the train wasn’t very full) for me. I &lt;em&gt;think&lt;/em&gt;
	 I figured out a lot more about how the Attribute Graph is used by SwiftUI and have a (bad) working prototype of SwiftUI that does incremental layout and state while still being a directed acyclic graph.
&lt;/p&gt;
&lt;p&gt;
	I tried baking miso cookies (for the third time) and they came out a lot better, but still very far away from the ones I tasted in Berlin. Also made pizza in our new pizza oven for the first time, somehow this was extremely stressful as things didn’t really go as planned. But I’m sure with more practice I can figure it out.
&lt;/p&gt;
&lt;p&gt;
	I signed up for Bluesky (&lt;a href=&quot;https://bsky.app/profile/eidhof.nl&quot;&gt;@eidhof.nl&lt;/a&gt;) and posted a first video on there. For the rest of the month, my plan is to post a bunch of SwiftUI-related videos, let’s see how that goes.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 02 Dec 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-48</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-48</guid>
		</item>
		<item>
			<title>Weeknotes № 47</title>
			<description>
				&lt;p&gt;
	Last week was intense but really fun. We taught a SwiftUI workshop on site which is always quite involved (with travel) but so worth it. There’s just no substitute for real face-to-face interaction. I think most people really appreciated our visualizations and explanations. We put a lot of time and effort into these, so it’s always great when this gets appreciated. This week we’ll do another on-site workshop but closer to home (in Hamburg)
&lt;/p&gt;
&lt;p&gt;
	To prepare the exercises I’ve used &lt;a href=&quot;https://github.com/martinvonz/jj&quot;&gt;jj&lt;/a&gt; (instead of git) extensively. It’s such a time saver because we need to rewrite commits all the time.
&lt;/p&gt;
&lt;p&gt;
	After getting back from London I took an extra day off (for the most part, at least) to spend more time with the family. We also went to the Dutch embassy in The Netherlands to celebrate “Sinterklaas”, which was a lot of fun. I had quite the persistent cold so hardly did any exercise. Now it’s time for more traveling.
&lt;/p&gt;
&lt;p&gt;
	I took a minute to at least provide a brief update to my post about &lt;a href=&quot;http://chris.eidhof.nl/post/variadic-views/&quot;&gt;variadic views&lt;/a&gt; and how they relate to the new &lt;code&gt;Group(subviews:transform:)&lt;/code&gt; API. It’s pretty cool that you can still use variadic views as a drop-in replacement for targeting older platforms.
&lt;/p&gt;
&lt;p&gt;
	I spent more time trying to implement the SwiftUI part of the attribute graph but couldn’t quite get it right. It’s definitely proven to be a bit tricky to write all of this code without any cycles. Specifically, I was trying to implement the node in the graph that allows you to attach an arbitrary &lt;code&gt;Layout&lt;/code&gt;. Once that works, things like &lt;code&gt;.frame&lt;/code&gt;, &lt;code&gt;.padding&lt;/code&gt; or even &lt;code&gt;HStack&lt;/code&gt; will be really easy to port over.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 24 Nov 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-47</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-47</guid>
		</item>
		<item>
			<title>Weeknotes № 46</title>
			<description>
				&lt;p&gt;
	I’m writing this week’s notes from London. I traveled here by train, it was a bit more of a hassle compared to my regular train rides (security/border control) but still a lot nicer than flying. On my way to London I stopped over in The Netherlands to do two days of hiking with my friends.
&lt;/p&gt;
&lt;p&gt;
	In our workshops, the people in each group have different experiences and work at different speeds. Therefore, we always include plenty of bonus exercises. Most of the bonus exercises are reusable, whereas the main exercises are almost all specific to the company we work with.
&lt;/p&gt;
&lt;p&gt;
	We refined and tweaked the bonus material over the last few years. This week, I created new bonus exercises to replace some of the old ones. The new bonus material is more self-contained, more concise, and focuses on some newer topics. For example, the bonus exercise for animations now contains an exercise about keyframe animations.
&lt;/p&gt;
&lt;p&gt;
	After figuring out more Attribute Graph internals we finally had the confidence to start our reimplementation of it. The &lt;a href=&quot;https://talk.objc.io/episodes/S01E429-attribute-graph-part-1&quot;&gt;first episode&lt;/a&gt; came out last Friday. We’re first building out the dependency tracking mechanism, and then we’ll make it more SwiftUI-specific.
&lt;/p&gt;
&lt;p&gt;
	The &lt;a href=&quot;https://www.youtube.com/watch?v=CPzf_0tRwcE&quot;&gt;video&lt;/a&gt; of &lt;a href=&quot;https://chris.eidhof.nl/presentations/swiftui-animations/&quot;&gt;my presentation on SwiftUI Animations&lt;/a&gt; came out last week. It’s the first time I’m using my new presentation tool, and while it wasn’t perfect, it did end up going pretty well.
&lt;/p&gt;
&lt;p&gt;
	I spent a bunch more time riding my gravel bike which was really fun. It’s starting to get properly cold now. I had my first flat (within a week of owning the new bike). I suspect it was something with the valve, but I’m not sure. In any case, I ordered a tubeless kit and once I’m back from London I’ll convert the bike to a tubeless setup.
&lt;/p&gt;
&lt;p&gt;
	My Zettelkasten is filling up with articles about SwiftUI, animations and some about therapy. I’m at 51 notes now, I doubt it’ll keep growing that quickly but let’s see.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 18 Nov 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-46</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-46</guid>
		</item>
		<item>
			<title>Weeknotes № 45</title>
			<description>
				&lt;p&gt;
	Last week I mostly spent preparing for two upcoming workshops. We have a good outline for our &lt;a href=&quot;https://www.swiftuifieldguide.com/workshops/&quot;&gt;SwiftUI Workshop&lt;/a&gt;, yet customize each workshop heavily for the client we work with. Once we know what exercises to do, we create a new repository with the starting point for exercise 1, then a commit for each exercies. It’s been helpful to use either &lt;a href=&quot;https://retcon.app&quot;&gt;Retcon&lt;/a&gt; or &lt;a href=&quot;https://github.com/martinvonz/jj&quot;&gt;Jujutsu&lt;/a&gt; to rewrite history and add pieces to older commits.
&lt;/p&gt;
&lt;p&gt;
	I spent more time exploring how the attribute graph works in SwiftUI. One useful thing I did was extracting all the named symbols using &lt;code&gt;nm -C&lt;/code&gt;, then feeding that into an LLM to get a description of &lt;code&gt;AttributeGraph.framework&lt;/code&gt;. This is what came out: &lt;a href=&quot;https://gist.github.com/chriseidhof/c6037948c1e6c1639fa19f891dfa368c&quot;&gt;transcript.md&lt;/a&gt;. I’ve also tried modeling an AG-based SwiftUI layout system with some success. At first, I was stumped about how to do this in an acyclic way, but I think I have something figured out now (not sure if it’s how SwiftUI does it, though). Once I feel more comfortable that it’s correct, I’ll try to write about it.
&lt;/p&gt;
&lt;p&gt;
	I still have my foot injury and hope it will go away by waiting it out, so can’t do any running. This has easily been the longest I’ve been without running, but luckily, I’ve been really enjoying gravel biking. I went for a few nice rides last week. I got a new bike as well (Canyon Grizl), I think I’ll prepare my older bike for indoor training and then for road cycling. On Sunday I rode for quite a long time in the cold and after about an hour and a half I noticed I was starting to get a little cold, slightly drowsy and (in hindsight) some other signs of early hypothermia. I thought I’d dressed warm enough, but will definitely need to up my layering for long rides.
&lt;/p&gt;
&lt;p&gt;
	I had an appointment to get my passport renewed and had to go to Berlin. One of the best parts was getting coffee with &lt;a href=&quot;https://nicholaschristowitz.com&quot;&gt;Nicholas&lt;/a&gt; afterwards. I had a miso chocolate chip cookie which was absolutely delicious. A few days later I tried baking some myself and they turned out quite nice but not nearly as good as the ones I had in Berlin. I’ll try some other recipes as well, there’s definitely room for improvement.
&lt;/p&gt;
&lt;p&gt;
	I’m trying out yet another note taking form, Zettelkasten. So far it seems to work well and I like the things it promises (better/easier writing). Often, I’m most excited about tools as I start using them, let’s see how this holds up in a few months.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 11 Nov 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-45</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-45</guid>
		</item>
		<item>
			<title>Weeknotes № 44</title>
			<description>
				&lt;p&gt;
	Going to &lt;a href=&quot;http://pragmamark.org&quot;&gt;pragma&lt;/a&gt; was awesome as always. We went with the whole family and took so many trains! (I even got a status upgrade by Deutsche Bahn and am now a gold member.)
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			Fürstenberg → Berlin
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			Berlin → München
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			München → Kufstein
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			Kufstein → Innsbruck
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	We then stayed in Innsbruck for two nights, and went on to Verona by taking two more trains:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			Innsbrück → Brenner
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			Brenner → Verona
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	After a night in Verona, we took a train straight to Bologna and a bus to top it off. The kids also really enjoyed all the travel. We did a reasonable job with packing, but should probably have packed lighter still. Our way back from Bologna was much easier: it only took us one train to get to Munich, and two more trains the next day to get home. We would definitely do something like this again.
&lt;/p&gt;
&lt;p&gt;
	I managed to implement a very basic version of the attribute graph based on &lt;a href=&quot;https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=9609985dbef43633f4deb88c949a9776e0cd766b&quot;&gt;this paper&lt;/a&gt;. It seems to work for basic stuff, but I’m not 100% sure yet how to do all the SwiftUI-specific things. For example, how does layout work? The parent proposes a size, so the child is dependent on that. Yet the child may at a later point change its state and the parent needs to relayout.
&lt;/p&gt;
&lt;p&gt;
	My talk at Pragma went well. I had my talk ready a few weeks before the conference, yet like to practice a lot in the days before the actual talk. Due to the kids and traveling, I was only able to go through my talk twice in the final week, but it still went okay. In general, there were a lot of great talks and conversations at the conference.
&lt;/p&gt;
&lt;p&gt;
	For most things I have been using &lt;a href=&quot;https://github.com/martinvonz/jj&quot;&gt;jj&lt;/a&gt; instead of git as my daily driver. It works surprisingly well. In my career I’ve used CVS, SVN and git. Each always felt like a big step forward and somehow made the previous tool feel old and outdated. jj has a similar effect for me.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 04 Nov 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-44</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-44</guid>
		</item>
		<item>
			<title>Weeknotes № 42-43</title>
			<description>
				&lt;p&gt;
	I’m still not running but really enjoying the biking. If my injury doesn’t improve soon I’ll start looking for some treatment instead. However, biking doesn’t cause any pain so maybe I should just keep enjoying that and not do anything else for a while.
&lt;/p&gt;
&lt;p&gt;
	After my trip to Paris last month, we decided to go to Bologna, Italy by train, but this time with the whole family. We made two stops along the way (in Innsbruck and Verona) and after 9 trains and one bus we made it to Bologna. The &lt;a href=&quot;https://pragmaconference.com&quot;&gt;pragma conference&lt;/a&gt; is always super fun, even though I haven’t been for a few years.
&lt;/p&gt;
&lt;p&gt;
	I started playing around with &lt;a href=&quot;https://martinvonz.github.io/jj/latest/&quot;&gt;jujutsu&lt;/a&gt; last week. I’ll try to experiment with it more, it looks to be extremely useful for some of my workflows with git (specifically rewriting history and editing older commits). At the moment, I use &lt;a href=&quot;https://retcon.app&quot;&gt;Retcon&lt;/a&gt; for this (which is awesome).
&lt;/p&gt;
&lt;p&gt;
	I started a &lt;a href=&quot;http://github.com/chriseidhof/til&quot;&gt;TIL&lt;/a&gt; repository, let’s see if I can keep it up.
&lt;/p&gt;
&lt;p&gt;
	I played around a bit with sqlite. It’s still kind of weird that there’s no one way to create personal databases these days. For example, I’d like to create an invoice system that’s backed by sqlite, but it’s so much code to write this. I’d like to make this easier.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 28 Oct 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-43</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-43</guid>
		</item>
		<item>
			<title>Weeknotes № 41</title>
			<description>
				&lt;p&gt;
	It looks to be quite a busy end-of-the-year, after a few months of focusing on other stuff there’ll be a batch of workshops all at once, mostly on location (which is more time and cost intensive, but also definitely more fun). I’ve been preparing a bunch, and also preparing a lot more background material. I’m hoping to integrate some of the things from my presentations as well, for example, the fake animation debugger from my &lt;a href=&quot;https://chris.eidhof.nl/presentations/swiftui-animations/&quot;&gt;Swift Connection talk&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	One of the libraries I’ve used throughout the last months is my Mac &lt;a href=&quot;https://github.com/chriseidhof/dynamic-type&quot;&gt;Dynamic Type&lt;/a&gt; library. I took the iOS dynamic type sizes and replicated the dynamic type API so that my Mac apps (or fake simulator previews) can have dynamic type support as well. This has been great for presentations (I can just increase the font size &lt;em&gt;and&lt;/em&gt;
	 everything else related to that because most things have a &lt;code&gt;@ScaledMetric&lt;/code&gt; in front of them). It’s also super useful in our &lt;a href=&quot;https://www.swiftuifieldguide.com/workshops/&quot;&gt;workshop app&lt;/a&gt;, and we’re working on adding some more support for that as well.
&lt;/p&gt;
&lt;p&gt;
	I’ve played around with a few more “reusable” bonus exercises for our workshop. It’s really hard to find good exercises that teach a subject, are realistic and yet small enough that you can solve it in a short timeframe. However, when you do find good examples, it’s quite rewarding.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 14 Oct 2024 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2024-41</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-41</guid>
		</item>
		<item>
			<title>Weeknotes № 41</title>
			<description>
				&lt;p&gt;
	As we are now tied to the school holidays, we made the best off of a few consecutive days off and went to the Netherlands to visit family last week. I did not bring my bike and went for a single bike ride on a mountain bike (on the completely flat roads). I did go for my first run in months, which was awesome. It was much harder than I remember running to be and I definitely had all kinds of soreness, but my injury didn’t get any worse.
&lt;/p&gt;
&lt;p&gt;
	I worked a bit on my presentation for &lt;a href=&quot;https://pragmaconference.com&quot;&gt;Pragma Conference&lt;/a&gt;. Really looking forward to meeting everyone there as well as giving my talk. Because it’s the end of the year, all of a sudden we had a bunch of workshop requests, most of which are still not fully confirmed. Even though there’s just one quarter left, it’s not possible to tell whether the end of this year will be extremely busy or not.
&lt;/p&gt;
&lt;p&gt;
	I also spent last week rewriting some of the internals of my typing recorder. It’s now a little easier for me to edit mistakes. This doesn’t work perfectly yet and there’s always a possibility of an edit breaking the entire document. I should probably at the very least implement undo and redo.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 07 Oct 2024 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2024-40</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-40</guid>
		</item>
	</channel>
</rss>