<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Chris Eidhof</title>
		<description>
			Personal Blog
		</description>
		<link>http://chris.eidhof.nl</link>
		<atom:link href="http://chris.eidhof.nl/feed.xml" rel="self" type="application/rss+xml"/>
		<item>
			<title>Weeknotes № 21</title>
			<description>
				&lt;p&gt;
	When I started, I managed to write weekly weeknotes, then the schedule changed to bi-weekly weeknotes and now it’s been three weeks. I’ve had a pretty busy few weeks behind me with preparing and teaching workshops, preparing my talk at &lt;a href=&quot;https://omt-conf.com&quot;&gt;One More Thing&lt;/a&gt;, national holidays, sick kids and other life things.
&lt;/p&gt;
&lt;p&gt;
	My talk will be about animations in SwiftUI, and together with &lt;a href=&quot;https://www.juulspee.nl&quot;&gt;Juul&lt;/a&gt; and &lt;a href=&quot;https://nicholaschristowitz.com/projects/swiftuifieldguide/&quot;&gt;Nick&lt;/a&gt; we’re designing and implementing some (hopefully) very helpful visualizations. Because most of my work stuff feeds back into each other, we’ll be able to use this for the talk, during the workshops and hopefully on the SwiftUI Field Guide as well.
&lt;/p&gt;
&lt;p&gt;
	During the preparations I realized a new way to debug animations in SwiftUI that lets you stop an animation at any point in time. Florian and me recorded &lt;a href=&quot;https://talk.objc.io/episodes/S01E405-debugging-animations&quot;&gt;an episode&lt;/a&gt; about this.
&lt;/p&gt;
&lt;p&gt;
	Over the last years, and specifically over the last weeks I continued upgrading my home video conferencing setup. I use a DSLR with a teleprompter to have a good image quality while being able to look directly at the camera. I invested in an overhead microphone with an external audio interface. Rather than attaching all devices to my desk (as I’ve done previously) I now moved my camera, lights and microphone to be wall attached. This gives me a video feed that doesn’t shake as I type.
&lt;/p&gt;
&lt;p&gt;
	It’ll be a busy few next weeks in between workshops and visiting the bay area, but I’m looking forward to some “downtime” after that so I can get back to improving the Field Guide.
&lt;/p&gt;
			</description>
			<pubDate>Tue, 28 May 2024 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2024-21</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-21</guid>
		</item>
		<item>
			<title>Weeknotes № 18</title>
			<description>
				&lt;p&gt;
	The &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/dynamic-type/&quot;&gt;Dynamic Type&lt;/a&gt; page on the Field Guide is finally live. There are still some things I’d like to tweak (especially on mobile). The values that we use are directly from the Human Interface Guidelines, I’m not sure if they’re 100% the same as Apple’s actual implementation, but definitely close enough. We also used these to implement Dynamic Type on the Mac: &lt;a href=&quot;https://github.com/chriseidhof/dynamic-type&quot;&gt;https://github.com/chriseidhof/dynamic-type&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	I played around with compiling Swift to WASM after seeing &lt;a href=&quot;https://m.objc.io/@maxd@mastodon.social/112373031107893812&quot;&gt;Max’s post&lt;/a&gt;. I really wanted to make it work with embedded Swift (to avoid large wasm binaries) but it’s still quite limited. I managed to produce &lt;a href=&quot;https://github.com/chriseidhof/wasm-testing&quot;&gt;a minimal Hello, World example&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	We recorded some more Swift Talk episodes, and I had a bunch of workshop-related planning and calls. I also went to Prague to give a talk about SwiftUI’s layout system, which was nice but short. It was good seeing old friends again. The talk was a mix of live-coding and presentation, which turned out well, I think. I traveled to Prague by train, which is easily my prefered way of long-distance transportation. I love sitting on the train, looking out the window and doing some work.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 06 May 2024 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2024-18</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-18</guid>
		</item>
		<item>
			<title>Weeknotes № 16</title>
			<description>
				&lt;p&gt;
	After another workshop last week I did not have that much time to work on the Field Guide, but Dynamic Type is fully working now (and live). I’m hoping to write a bit about it soon as well.
&lt;/p&gt;
&lt;p&gt;
	This week, I’m giving a talk at a conference, and I’m using the Field Guide for my slides. This is where Dynamic Type comes in really handy: I can bump up the dynamic type setting and all examples increase their font sizes, which is incredibly useful.
&lt;/p&gt;
&lt;p&gt;
	In the future, I want to animate changes to the code (for example, animate the addition of a new modifier to existing code). I’ve been trying to think about this quite a bit. Currently, everything happens at the AST level, but should that maybe happen at the parse level (which doesn’t currently exist)? Or should I keep the syntax tree stable and somehow allow to add new root nodes? I’ve been experimenting a bit with the last approach but am not sure how it will work in practice. I’m unfortunately not aware of any research in that area (I’m sure there is some, I just don’t know what to search for).
&lt;/p&gt;
&lt;p&gt;
	Over the last months I’ve been preparing well for a marathon, and last Sunday was the race. I am pretty fit although far from PB level. For the first 25k, I was leading the race, but then slowed down a little bit. Just a few minutes later two volunteers sent me and the guy behind me in the wrong direction. This took us a few kms to figure out, so we ended up back at the start line in almost world record time (without having run the full distance, of course). This was incredibly frustrating after having spent all the time, effort and money just to be on the starting line. On the other hand, I know all too well how all of these events are run by large groups of volunteers and am very thankful for that, mistakes can happen. I think I did prove to myself that my fitness is increasing again, and hopefully I’ll run a full marathon somewhere in a few months!
&lt;/p&gt;
			</description>
			<pubDate>Mon, 22 Apr 2024 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2024-16</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-16</guid>
		</item>
		<item>
			<title>Weeknotes № 14-15</title>
			<description>
				&lt;p&gt;
	It’s been a couple of really busy weeks. We released two new pages: one on &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/zstack/&quot;&gt;ZStack&lt;/a&gt; and one on &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/lazyvgrid/&quot;&gt;LazyVGrid&lt;/a&gt;. These come with a couple of subtle changes as well: on the lazy grid page (and sprinkled throughout a few other places in the site) we now use the SVG rendering of shapes, which also lets us do very subtle gradients. We added a few subtle interactions as well: for example, the spacing is visualized while you edit the grid’s spacing.
&lt;/p&gt;
&lt;p&gt;
	I started preparing for a talk next week and wanted to use the Field Guide as my slides. Because a lot of the examples use small font sizes that are probably unreadable in a presentation, I gave the implementation of Dynamic Type a bit of priority, and it looks like it’s now fully working throughout the site. At the moment, you can’t adjust it (except in the code), but hopefully we’ll manage to build some UI for that soon.
&lt;/p&gt;
&lt;p&gt;
	Under the hood, I’ve been moving more and more modifiers away from custom views and into custom layouts. For example, padding is now just a padding layout, and overlay is an overlay layout (all the stacks and grids are layouts, as well). By doing this, I can actually focus on only the layout code and don’t have to worry about other boilerplate things. It feels much more natural and efficient than creating regular views or view modifiers.
&lt;/p&gt;
&lt;p&gt;
	We have a number of workshops coming up, and Juul has been very hard at work improving our workshop app (a native Mac app that comes with each workshop). It feels much more polished, is easier to read and navigate. It also supports Dynamic Type now (even though the Mac itself doesn’t, yet.).
&lt;/p&gt;
&lt;p&gt;
	I feel like I’m now finally almost done with setting up the new company. I have a new invoicing workflow, finally got my VAT ID (this involved me calling the tax office every single day, at some point they even recognized me by my phone number). The German bureaucracy was never much of an issue to me, but this time it definitely lived up to the hype.
&lt;/p&gt;
&lt;p&gt;
	I also booked my travel to go to &lt;a href=&quot;https://omt-conf.com&quot;&gt;One More Thing&lt;/a&gt;. I’ve never gotten lucky with getting a ticket to any of the Apple events (WWDC or Tech Talks) and so have never been at WWDC. But I’m excited to be around for the week, hoping to meet a lot of old and new friends.
&lt;/p&gt;
			</description>
			<pubDate>Tue, 16 Apr 2024 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2024-15</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-15</guid>
		</item>
		<item>
			<title>Weeknotes № 12-13</title>
			<description>
				&lt;p&gt;
	In between all the workshops and family stuff I’ve made progress in a few different areas of the SwiftUI Field Guide.
&lt;/p&gt;
&lt;p&gt;
	I’ve been trying to implement gradients, which turned out to be a bit of a rabbit hole. First of all, currently all shapes are rendered using the canvas API (originally, the entire SwiftUI port was rendered in a single canvas). To implement different gradients, I wanted to switch that out to SVG rendering.
&lt;/p&gt;
&lt;p&gt;
	In canvas, you define paths using the &lt;code&gt;Path2D&lt;/code&gt; type which isn’t “inspectable”. In other words, I needed to replicate the &lt;code&gt;Path2D&lt;/code&gt; API in my own type, which we can then use to turn into the SVG drawing commands. Mostly, everything works as before, but I need to put in a bit more time to make animations work as well.
&lt;/p&gt;
&lt;p&gt;
	To draw gradients, SVG has builtin support for linear and radial gradients. However, I noticed that these don’t look quite the same as SwiftUI. In the end, a gradient is just a function that interpolates between two colors. SVG gradients use an RGB color space, and to interpolate between two colors, each of the components (red, green and blue) are interpolated separately. It took a while to figure out that SwiftUI uses a different color space. In fact, you can actually configure whether to use the device color space or a “perceptual” color space (with the perceptual color space being the default).
&lt;/p&gt;
&lt;p&gt;
	From my testing, it looks like the perceptual color space used is &lt;a href=&quot;https://bottosson.github.io/posts/oklab/&quot;&gt;OKLab&lt;/a&gt;. After figuring that out, I searched for “OKLab SwiftUI” and found &lt;a href=&quot;https://twitter.com/DLX/status/1620465189069148160&quot;&gt;a tweet&lt;/a&gt; by (who else) Robb who seems to have figured out the same thing (more than one year before me, of course). I found &lt;a href=&quot;https://raphlinus.github.io/color/2021/01/18/oklab-critique.html&quot;&gt;this interactive review&lt;/a&gt; very helpful in understanding and visualizing the differences.
&lt;/p&gt;
&lt;p&gt;
	For now, I’m approximating a perceptual gradient by generating a linear RGB gradient with a number of extra “hidden” stops in between (which are interpolated in the OKLab color space). The implementation isn’t perfect but it’s a good start.
&lt;/p&gt;
&lt;p&gt;
	Early last December, I started to make calls to incorporate my new company. Most steps are done, but the German bureaucracy is not joking around on this one. I finally got my tax number a few weeks ago. However, for some opaque reason I couldn’t get a VAT ID After many calls to different agencies it took some steps to get the process unstuck (no one told me it was stuck, though). While I did apply for a new number now, the process might apparently take up to two months. I can’t send (or pay) any invoices outside of Germany until then, which is extremely annoying. It truly isn’t easy to start a business here. Luckily, my German is now good enough that I can at least talk to the people responsible for the individual steps. When they write letters, it’s nearly impossible to decipher them for someone like me, but in the end, they just seem to like to use complicated words and lots of jargon.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 01 Apr 2024 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2024-13</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-13</guid>
		</item>
		<item>
			<title>Weeknotes № 10-11</title>
			<description>
				&lt;p&gt;
	I’ve done two more weeks of weekly workshops (one in-person workshop in Germany, and one online for the US West Coast) and a talk at CocoaHeads Hamburg. It’s been pretty intense and I did not have a lot of time to work on the Field Guide.
&lt;/p&gt;
&lt;p&gt;
	One cool thing is that I gave my presentation in Hamburg using the Field Guide. I just set up a new “page” with full-screen interactive explanations and stepped through them. After all the hard work we put in it felt almost like cheating to be able to set up a basic presentation so quickly.
&lt;/p&gt;
&lt;p&gt;
	This week I’ll try to publish a new page about the safe area. I’ve been thinking about how to implement this for a long time, tried multiple approaches but ultimately settled on a relatively simple implementation (that’s correct in my limited testing). I have so many more ideas for where to take this, but currently only have limited time because of the workshops. I’m not yet set up for collaboration, so currently, I need to implement the SwiftUI part of the concept I want to explain, then implement the designs that Nicholas makes and finally write the explanations. Of course, we hardly ever get things right the first time around, so it’s always a few iterations of this process before we push things live.
&lt;/p&gt;
&lt;p&gt;
	The marathon training was slightly compromised especially by the traveling involved. I still think I’m well prepared to run a decent time next month. My plan was always to use the upcoming spring marathon as a stepping stone to getting fit again. I’m far from PB level fit (2:36) but hope I can run 2:50 or similar. That means spending the next few weeks tweaking the details, not getting injured and not getting sick.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 18 Mar 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-11</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-11</guid>
		</item>
		<item>
			<title>Weeknotes № 9</title>
			<description>
				&lt;p&gt;
	I spent last week teaching a workshop in Berlin. It was the first time in years doing an in-person workshop, which was really great. Im doing another in-person workshop in Hanover this week, and giving a talk in Hamburg at their CocoaHeads meetup. Both teaching the workshop from last week as well as preparing everything for this week did take up most of my time and energy.
&lt;/p&gt;
&lt;p&gt;
	Running-wise, I missed a few workouts. When I’m at home, I mostly run when it’s light out. I forgot to bring a headlamp, and couldn’t really do a speed workout in the dark with no vision while I was in Berlin. Luckily, my training schedule had a planned rest week anyway, so I’m not too worried about it. (Rest week doesn’t mean no running, it just means running a bit less).
&lt;/p&gt;
&lt;p&gt;
	I did manage to release one new section and two new pages for the Field Guide. The new section is about &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/alignment/#customAlignmentIDs&quot;&gt;custom alignment IDs&lt;/a&gt;. I also added an &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/introduction/&quot;&gt;introduction&lt;/a&gt; and a page about &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/debugging/&quot;&gt;debugging techniques&lt;/a&gt;. I’m not sure yet what I’ll write about this week — there’s quite a backlog of things I’d like to cover still.
&lt;/p&gt;
&lt;p&gt;
	I also went over and fixed some bugs in the Field Guide. Since the first release the numbers in the sliders were often misaligned (sometimes not, though). It was a very simple fix in the end (although I did spent quite some time trying to fix it before). Likewise, there was a bug where some of the HStack examples would get stuck in an infinite render loop, ultimately causing the page to get really slow and make the browser unresponsive. That should be fixed now, too.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 04 Mar 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-09</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-09</guid>
		</item>
		<item>
			<title>Weeknotes № 8</title>
			<description>
				&lt;p&gt;
	Last week I had to prepare a bunch of other things (workshops, start on a presentation) and only had limited time for the Field Guide. I also wanted to recover a bit from pushing myself. It’s kind of similar to running training: to achieve things on the short term, you need to push yourself out of your comfort zone, to achieve things on the long term, you need to then recover from that.
&lt;/p&gt;
&lt;p&gt;
	I did manage to write a section about &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/layout/#flowLayout&quot;&gt;Building a Flow Layout&lt;/a&gt;. Because that section has a number of larger code blocks with no direct preview, we added little “info” icons in the gutter of the code. These highlight specific lines and show a small tooltip with an explanation. We also added code folding. Both of hopefully make the examples a little friendlier (yet, if you want to really understand what’s happening you’ll still need to struggle through the code, there’s no way around that). By the way, when I say “we”, I mean &lt;a href=&quot;https://nicholaschristowitz.com/projects/swiftuifieldguide/&quot;&gt;Nick&lt;/a&gt; and me. The entire site is a close collaboration between him designing and me implementing everything.
&lt;/p&gt;
&lt;p&gt;
	I had a good week of running as well, adding up to 123km. I’m not sure if I’ll ever make the time to get in PB shape again (it just requires a lot of training for me), I think I should be able to comfortably run a sub 3 marathon again.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 26 Feb 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-08</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-08</guid>
		</item>
		<item>
			<title>Weeknotes № 5-7</title>
			<description>
				&lt;p&gt;
	Over the last few weeks I worked with a strong focus and did not take the time to write weeknotes. The &lt;a href=&quot;https://www.swiftuifieldguide.com&quot;&gt;SwiftUI Field Guide&lt;/a&gt; is now live. I’ll try to blog a bit more about the why and how in the upcoming weeks. It felt a bit like preparing for a marathon: I worked hard at it almost every single day (often also evenings, after the kids went to bed) for multiple months. In the days before the launch, I wanted to get everything as perfect as I could (there were still some pretty embarassing bugs just before the launch). The day after launching it, I felt happy but absolutely exhausted.
&lt;/p&gt;
&lt;p&gt;
	It’s been a real pleasure building this. The design was all done by &lt;a href=&quot;https://nicholaschristowitz.com/&quot;&gt;Nick&lt;/a&gt; who also really obsessed over getting this right. I did the rest. There are so many fun little details in there: the site changes color when you’re in dark mode (and the “SwiftUI” colors change, too). The code is formatted using a pretty printer, making it responsive on mobile (this isn’t perfect, but in most examples it is better than doing nothing). The &lt;a href=&quot;https://www.swiftuifieldguide.com/layout/hstack/#PeDNMT-&quot;&gt;more complex animations&lt;/a&gt; are done in “SwiftUI”.
&lt;/p&gt;
&lt;p&gt;
	In my first prototype, I rendered everything using a flat canvas view. This worked well, but I realized at some point that I wanted more interactive elements such as scroll views and buttons. I didn’t really want to implement an entire scroll view myself. At some point, I switched to building up a DOM tree so that I could use the browser’s built-in scrolling (which in turn uses the platform’s built-in scrolling). Some views are still rendered using canvas (text and advanced shapes) where others use native DOM elements (a filled rounded rectangle, for example, is just a div with a background color and border radius).
&lt;/p&gt;
&lt;p&gt;
	I really wanted to make everything work as close as possible to real SwiftUI as I could. Essentially, anything that lays out differently I consider a bug. Hopefully I can fix some of the remaining bugs very soon.
&lt;/p&gt;
&lt;p&gt;
	In other news, I have been ramping up my marathon training again, and started a new schedule to (hopefully) run a marathon in late April. I typically prepare using at least a 16 week schedule, but due to illness at the beginning of the year I only have 12 weeks. I don’t want to run even later (in May) because I run much better when it’s cooler. I decided to use this marathon as a stepping stone to getting fit again. Clearly, there is no room for getting sick again — if COVID or something else happens I will have to set a different goal.
&lt;/p&gt;
			</description>
			<pubDate>Tue, 20 Feb 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-07</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-07</guid>
		</item>
		<item>
			<title>Weeknotes № 4</title>
			<description>
				&lt;p&gt;
	We’re in the polishing phase of the new SwiftUI web project, and I spent quite some time on getting the animations right. The framework now supports some basic transitions as well as animating the frame of views. Currently, property animations are not supported (although I think they should be very easy to add). On of the examples has a bunch of transitions and matched geometry effects, which turned out to be a bit tricky to get completely correct (but I think I got 95% of the way there).
&lt;/p&gt;
&lt;p&gt;
	We also dug into explaining alignment in SwiftUI. I feel like this is one of the most underappreciated APIs. With a solid understanding you can save so much code. It’s always a topic in our workshops as well and seems to really help people.
&lt;/p&gt;
&lt;p&gt;
	We’ve had a few sunny days last week and spent some time preparing the garden. I forgot how nice it can be to just be outside in the sun and do light physical labour. We also went to (yet another) demonstration with the family.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 29 Jan 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-04</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-04</guid>
		</item>
		<item>
			<title>Weeknotes № 3</title>
			<description>
				&lt;p&gt;
	Last week was really busy, but in a relatively balanced way. We got fresh snow and spent a bunch of time pulling sledges. I also ran every single day of the week, without problems (92km in total). One more week until my 12-week marathon preparation starts. This week I’m hoping to do the same but with a bit more volume. I went to two local meetings (one for the day care and one town-wide gathering). We also went to a demonstration with the whole family yesterday, as I think it’s important that we all become a bit more tolerant and open for diversity.
&lt;/p&gt;
&lt;p&gt;
	Together with Nicholas (the designer) I made a lot of progress on the new SwiftUI explanations website. I think we’re getting to a point where it’s almost ready to make it public. My goal is to have this out before the end February. There are still a few design issues that need to be solved and a bunch of content that needs to be written, but it’s all really starting to come together now. I hope to make a list of everything that needs to be done before launch within the next few days.
&lt;/p&gt;
&lt;p&gt;
	I also started to prepare two in-person workshops in Germany that’ll happen within the next months. I’m really looking forward to the in-person part, as it’s been quite a while since I last did that.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 22 Jan 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-03</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-03</guid>
		</item>
		<item>
			<title>Weeknotes № 2</title>
			<description>
				&lt;p&gt;
	The persistent cough I’ve had for weeks is finally getting better. I started running again (small steps). Originally, I wanted to start my marathon preparation a few weeks ago, but I had to postpone to get healthy again first. This means I can’t do a 16-week prep as usual, so I’ll do a 12-week version. While it won’t get me in the shape I want yet, it’s definitely going to be a good place to then build from.
&lt;/p&gt;
&lt;p&gt;
	We spent a day preparing for Swift Talk episodes, and I spent the rest of the week working on the new project (explaining SwiftUI in the browser). I made some really good progress: I separated updating views from laying views out, I added initial support for animations and transitions and implemented matched geometry effect. Some of the explanations we’re hoping to achieve are way better with animations, and this seemed like the easiest way to achieve that.
&lt;/p&gt;
&lt;p&gt;
	I also incorporated a new company. Or to be more precise: I took the first steps to being incorporated, as this process is quite elaborate in Germany, involving multiple in-person meetings. While the existing company I run with Florian is going to stay around, this new project will run under the new company.
&lt;/p&gt;
&lt;p&gt;
	Finally, I did a few smaller home improvement projects. For the first time, I worked with aluminum. It was pretty basic: just cutting stuff and drilling holes. The only tricky bit is that I wanted to tap threads, but that didn’t really work out the way I wanted (three of the holes ended up great, but on one of them I made a mistake and the bolts wouldn’t grip in the threads. I kind of want to learn to weld as well, but I’ve read that welding aluminum is pretty tricky.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 15 Jan 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-02</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-02</guid>
		</item>
		<item>
			<title>Weeknotes № 1</title>
			<description>
				&lt;p&gt;
	Last week the kids were still at home, so my week was mostly filled with care tasks.
&lt;/p&gt;
&lt;p&gt;
	I had officially started my marathon plan on Dec 18th, and while the first day or two went great, I then got a pretty intense cough which is still not completely gone. I only managed to put in a few runs. Last week, I only ran once. I was planning to prepare well for a late April marathon, but that’s not possible anymore (I could still run if I can get in some decent training, but not at the level I was hoping for).
&lt;/p&gt;
&lt;p&gt;
	I did make a bunch of progress on the layout explanation website. I now have fully working HStack explanations (visualizations that explain the internals of how an HStack lays out its children). While we’re still working on the design, the basic case is now visualized really well.
&lt;/p&gt;
&lt;p&gt;
	I’m still enjoying TypeScript. While I prefer Swift, it’s nice to have integrated Copilot support. The other day I pasted in a Swift snippet that I wrote a while ago and started translating it line-by-line, and Copilot did most of that work. I don’t really trust it generating more than one line (or more than I can immediately parse in my head), but when I’m on the train with no internet connection, I do miss it.
&lt;/p&gt;
&lt;p&gt;
	TypeScript’s structural types are both great and annoying. I miss Swift’s enums, which you have to simulate through tagged unions. The thing I miss the most is value semantics: in TypeScript (which is just types on top of Javascript), everything is an object, and almost everything is passed by reference. I’ve definitely seen my share of “spooky action at a distance”, where a value would all of a sudden change underneath me. As the code base matures, I’m adding more and more &lt;code&gt;clone&lt;/code&gt; or &lt;code&gt;copy&lt;/code&gt; methods to my types (giving me a new instance of an object with the same properties).
&lt;/p&gt;
			</description>
			<pubDate>Mon, 08 Jan 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2024-01</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2024-01</guid>
		</item>
		<item>
			<title>SwiftUI Binding Tips</title>
			<description>
				&lt;p&gt;
	When working with bindings in SwiftUI, it can be useful to modify bindings. For example, in a Slack I’m part of, someone had a binding to a Boolean and wanted to negate it. This was (roughly) the code they had:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;extension Binding where Value == Bool {
    func toggled() -&amp;gt; Self {
        Self(
            get: {
                !wrappedValue
            },
            set: { newValue in
                wrappedValue = !newValue
            }
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	While the code works great, it always feels a bit cumbersome to write. There’s a simpler way to achieve this. We can start by creating a computed property on &lt;code&gt;Bool&lt;/code&gt; that’s both &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;extension Bool {
    var flipped: Self {
        get { !self }
        set { self = !newValue }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Because &lt;code&gt;Binding&lt;/code&gt; supports dynamic member lookup, we can use our &lt;code&gt;flipped&lt;/code&gt; property directly where we use our binding:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;$myBinding.flipped
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	We’ve also used this pattern sometimes when projecting into a binding. For example, let’s imagine we want to display a control that enables us to select edges. Our state looks like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;@State private var edges: Set&amp;lt;Edge&amp;gt; = [Edge.top, Edge.bottom]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	If we want to enable and disable a specific edge through a &lt;code&gt;Toggle&lt;/code&gt;, we’ll need to turn the binding from a &lt;code&gt;Set&amp;lt;Edge&amp;gt;&lt;/code&gt; into a &lt;code&gt;Bool&lt;/code&gt; binding. We can again achieve this using dynamic member lookup, but this time through a subscript:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;extension Set {
    subscript(contains el: Element) -&amp;gt; Bool {
        get { contains(el) }
        set {
            if newValue {
                insert(el)
            } else {
                remove(el)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Now we can write &lt;code&gt;$edges[contains: .top]&lt;/code&gt; or &lt;code&gt;$edges[contains: .bottom]&lt;/code&gt; and get a &lt;code&gt;Bool&lt;/code&gt; binding out. The reason why we need a &lt;code&gt;subscript&lt;/code&gt; is that dynamic member lookup uses key paths, and both subscripts and computed properties can be part of key paths. A regular method cannot be part of a key path. While the technique is a little obscure, I still find it easier to read than writing all that logic inside a custom binding.
&lt;/p&gt;
&lt;p&gt;
	In general, I much prefer components that take a &lt;code&gt;Binding&lt;/code&gt; over components that observe all kinds of complicated view models, global stores or other things. They are easier to test and reuse and don’t require complicated architectures. Hopefully the two tricks above help you turn the bindings that you have into the bindings that you need.
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;
	: &lt;a href=&quot;https://hachyderm.io/@stephencelis&quot;&gt;Stephen Celis&lt;/a&gt; writes in:
&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;
		Another reason to prefer properties + dynamic member look up instead of constructing ad-hoc bindings is that ad-hoc bindings tend to break SwiftUI animation. Even if you do all the right stuff with the transaction, there is something weird deep in SwiftUI that causes an ad-hoc binding to be handed transactions with all animation info stripped away.
	&lt;/p&gt;
&lt;/blockquote&gt;
			</description>
			<pubDate>Sun, 07 Jan 2024 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/swiftui-binding-tricks</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/swiftui-binding-tricks</guid>
		</item>
		<item>
			<title>Weeknotes № 51-52</title>
			<description>
				&lt;p&gt;
	In between Christmas and New Years I’ve been slowly making progress on my layout explanations website. Nicholas (the designer) has been putting out different possible designs, and I’ve been trying to implement some of it (both in SwiftUI as well as in my web port).
&lt;/p&gt;
&lt;p&gt;
	I also spent a few days trying to figure out what happens when SwiftUI performs animations. I learned a few things:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			When you start an animation for a property while another animation for that property is already running, the results of these two animations get combined. The combined animation will always have the duration of the new animation. Also, at the end of the (new) animation, the value will be the result of the new animation. In between, these two values get interpolated. I’m hoping to write up some of my experiments soon.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			When you create multiple transactions (e.g. change one property, animate a change to a second property and then change another property) in one go (e.g. in a button action) these cause SwiftUI to reevaluate the body multiple times (once per transaction). This is necessary to figure out which views should be animated and which should update immediately.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	My goal is to understand animations so well that I can reimplement them without problems. I’m planning to also port the animation system to the web, so that I can use them for my visualizations in the layout explanations. Hopefully, at a later point, I can also use that to explain how animations work.
&lt;/p&gt;
&lt;p&gt;
	Depending on when you’re reading this: happy new year!
&lt;/p&gt;
			</description>
			<pubDate>Sun, 31 Dec 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-52</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-52</guid>
		</item>
		<item>
			<title>Weeknotes № 49-50</title>
			<description>
				&lt;p&gt;
	We recorded some Swift Talk episodes about tweakable values. We also continued implementing the new design for our website (and Swift Talk). It’s still not finished, hopefully soon.
&lt;/p&gt;
&lt;p&gt;
	I also spent a bunch of time on my SwiftUI layout explanation site. It’s not so easy to figure out the right visualizations, but I think we’re making progress there. I also want to have some animations in there, which means I’m going to attempt to clone SwiftUI’s animation system. I’ve reimplemented (parts of) the layout system a few times, but have never tried doing the animation system. I think the main challenge will be to make sure additive animations work as expected. I’m not too worried about performance — it’s something that should work correctly in a real implementation, but for my purposes, I only want to be able to animate a few views at the time.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 18 Dec 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-50</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-50</guid>
		</item>
		<item>
			<title>Weeknotes № 48</title>
			<description>
				&lt;p&gt;
	We held two workshops last week, one in PT and one in ET. This meant staying up (quite) late for five days in a row. It always takes some getting used to. But the advantage is that I had lots of daylight time to do other stuff.
&lt;/p&gt;
&lt;p&gt;
	I built a large wooden horse for my daughter. I finally took the time to set up my basement workshop (beyond the essentials). Got my dust collection going, which makes a massive difference (without dust collection, it isn’t much fun to spend longer than a few minutes there).
&lt;/p&gt;
&lt;p&gt;
	After a chat with my friend I moved my SwiftUI in the browser project over to next.js. This took a few days (during which the code didn’t compile). I feel a bit out of my depth in the entire modern web ecosystem, but I’ll manage. The nice thing is that now I can wrap up my functionality in React components, which is definitely an improvement over doing everything by hand.
&lt;/p&gt;
&lt;p&gt;
	I started slightly ramping up my running mileage and am hoping to start another 18-week marathon preparation in about a week from now. This should get me in shape for an April marathon. While it’s not realistic yet to train for a PB (I need a longer and more intensive buildup for that) I think I could aim for a second-best time. It depends a bit on how the next months go, training-wise.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 04 Dec 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-48</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-48</guid>
		</item>
		<item>
			<title>Weeknotes № 46-47</title>
			<description>
				&lt;p&gt;
	Here are the combined weeknotes for the last two weeks.
&lt;/p&gt;
&lt;p&gt;
	I visited my friend in London and met up with a bunch of friends. The NSLondon folks were nice enough to organize a drinks night, was great to see many old and new friends. London feels almost like the opposite of where we live (both in good and bad ways). One of my highlights was zipping through the streets in the dark rush hour on a rental E-bike (while being used to driving on the other side of the road). Felt dangerous but lots of fun.
&lt;/p&gt;
&lt;p&gt;
	I made more progress on the SwiftUI web port. I’m starting to write out explanations of modifiers and views. I think in a few weeks we can start on the design work as well. I think I’d like to do the HTML/CSS myself for this one. While I did do lots of front-end web development years ago, I feel quite out of touch with modern front-end development. There are so many new things! I like a lot of it, but the one thing I’m trying to avoid for as long as I can is all those dependencies (bundlers, npm packages, etc.).
&lt;/p&gt;
&lt;p&gt;
	We finished preparing two workshops (one in EST, one in PST, both in a single week). We also started some working on implementing the redesign of objc.io. This has been “ready” (that is, implemented in HTML/CSS) for over half a year, but we hadn’t gotten around to actually integrating it into our main website. So far, we only spent a day on this, but already made considerable progress.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 27 Nov 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-47</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-47</guid>
		</item>
		<item>
			<title>Weeknotes № 44</title>
			<description>
				&lt;p&gt;
	The first half of last week I was still away, so nothing much happened.
&lt;/p&gt;
&lt;p&gt;
	The second half of the week we started preparing two more workshops. We prepare each workshop specifically for the company we teach, so it’s always quite a bit of work. We believe it’s useful for the company we work with (as they work on problems directly related to their day-to-day work). Oftentimes, we also learn something ourselves.
&lt;/p&gt;
&lt;p&gt;
	In the odd hour I had available I worked on improving the SwiftUI layout port to the web. I think I’ve got enough of the SwiftUI part implemented, now it’s time to see how we can use this to create better explanations.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 06 Nov 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-44</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-44</guid>
		</item>
		<item>
			<title>Weeknotes № 45</title>
			<description>
				&lt;p&gt;
	On Monday I was excited to finally have a regular week of work again without any travel or other big things. Little did I know. On Monday we all got really sick. It knocked the whole family out for multiple days.
&lt;/p&gt;
&lt;p&gt;
	In the end, I did get a few days of solid work in last week. After finishing the projects we’ll build for our workshops, we split those up into individual exercises and write all the descriptions. We’ve gotten a lot more efficient at this, but it still takes a few iterations per workshop, even now.
&lt;/p&gt;
&lt;p&gt;
	I also went and cleaned up a little bit of the Workshop app (our Mac app that the attendees use). I added a few small features. For example, all examples have live previews, I added support for better resizing that feels more native on the Mac. We have “fake” simulators in the app that show the solution in context, and I improved some of our fake iOS components (e.g. our simulation of a navigation view).
&lt;/p&gt;
&lt;p&gt;
	In the evenings I kept tinkering with my web port of SwiftUI’s layout. Text layout now behaves almost exactly as SwiftUI’s Text view (which is based on CTFrameSetter). I added support for dark mode, and support to visualize a view’s origin and size. I added variables that allow you to change values in the source code by dragging them (similar to Bret Victor’s demos). There are so many more possibilities, but of course, my goal is for the end result to be very simple. So far TypeScript has really delivered on its promise, I feel confident making both small and large refactorings and having the type checker guide me through it.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 06 Nov 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-45</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-45</guid>
		</item>
	</channel>
</rss>