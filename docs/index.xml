<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Chris Eidhof</title>
		<description>
			Personal Blog
		</description>
		<link>http://chris.eidhof.nl</link>
		<atom:link href="http://chris.eidhof.nl/feed.xml" rel="self" type="application/rss+xml"/>
		<item>
			<title>Weeknotes № 22</title>
			<description>
				&lt;p&gt;
	I modified our &lt;a href=&quot;https://github.com/objcio/attributed-string-builder/&quot;&gt;attributed-string-builder&lt;/a&gt; to accept modifiers that can be applied to SwiftUI environment. For example, this lets us modify the environment for all embeds inside an &lt;code&gt;AttributedStringConvertible&lt;/code&gt;. So far, the library has been really useful, and we’ve gotten really far with the rendering. For the full book, it’s becoming a bit slow (a few seconds to render), but compared to our previous LaTeX/Pandoc setup it’s blazingly fast. The flexibility and control we get from it is pretty amazing. I know you can have that same (and more) control in LaTeX, but because we write Swift every single day this has way less friction for us.
&lt;/p&gt;
&lt;p&gt;
	We visualized more things, abstracted some of the visualizations away (when similar diagrams use the same abstraction we can be sure they render in the same way, and don’t have subtle errors). We also started working towards ordering a proof copy, with an increased paper size and printed using color instead of grayscale. We’ll have to see how all the text renders there. The first two chapters are now completely done with copy-editing, which means we can do the final typesetting there!
&lt;/p&gt;
&lt;p&gt;
	We recorded two more Swift Talk episodes last week, both on our Git reimplementation. I think with a bit of effort this could actually be turned into a usable dependency-free Git implementation, although getting it secure and safe would probably be a major effort.
&lt;/p&gt;
&lt;p&gt;
	I picked up my running a bit over the last weeks. I finally feel like I have energy for that again (was heavily blocked by the move). I’m slow compared to last year, but only focusing on building out my endurance. I can maintain last year’s marathon pace maybe for one or two kilometers. However, I’m trying to keep a &lt;a href=&quot;https://fs.blog/carol-dweck-mindset/&quot;&gt;growth mindset&lt;/a&gt; and improve every day. The weather has been really nice here, and it’s been amazing to dip in the lake after a run. Also, we finally moved into our actual bedrooms. The flooring was only finished on Friday so we had to improvise a bit until then.
&lt;/p&gt;
			</description>
			<pubDate>Mon, 05 Jun 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-22</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-22</guid>
		</item>
		<item>
			<title>Weeknotes № 21</title>
			<description>
				&lt;p&gt;
	We prepared and recorded episodes that reimplement the core data structures of Git in Swift (without any third-party dependencies). The model of Git is really simple — I think it’s beautiful. In the episodes we recorded everything is read-only, but I managed to get writing to work as well. The tricky part is that objects in git are stored with zlib compression, which requires both a (static) binary header as well as a checksum. I spent quite some time getting the checksum right — but at least the end result is not a lot of code.
&lt;/p&gt;
&lt;p&gt;
	We also continued working on all the diagrams, mostly focusing on animations and transitions this week. For example, this accompanies a section about implementing a custom animatable (shake) modifier:
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chris.eidhof.nl/images/2023-05-29-shake.png&quot; title/&gt;&lt;/p&gt;
&lt;p&gt;
	I spent a lot of time with the kids and in the garden. We improved our watering setup (although I hope to get a better rainwater system soon) and I did a whole bunch of odd jobs that are nice to cross off the list.
&lt;/p&gt;
&lt;p&gt;
	Now that we moved in, I can really tell the difference in energy levels, especially when running. In hindsight, it kind of felt like I could only perform at 60% of my normal capacity (in life and in running). Now, I feel like I can do proper training again, even though I’m much slower than a year ago. But with time and patience I think I can get back towards running some good times again.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 28 May 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-21</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-21</guid>
		</item>
		<item>
			<title>Weeknotes № 20</title>
			<description>
				&lt;p&gt;
	We added a whole lot more diagrams to the book. One thing we struggled with is how to visually separate certain parts, and how to relate them to the text. One of the things we are now able to do is color our text inline (or apply any other attributes). Our Markdown renderer now uses a custom type for string interpolation that lets us embed any other type that converts to attributed strings.
&lt;/p&gt;
&lt;p&gt;
	In &lt;a href=&quot;https://m.objc.io/@chris/110383108374505754&quot;&gt;this post&lt;/a&gt; you can see an example. The code is in our book repository, but I think we can move the Markdown-related infrastructure to our &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;attributed-string-builder&lt;/a&gt; repository.
&lt;/p&gt;
&lt;p&gt;
	On Friday, our fridge arrived. We managed fine without one, but life is much easier with a functional fridge. I also cooked a meal where almost all ingredients came from the garden, except the rice and egg (a rice bowl with spinach, radish, fresh salad and herbs). We have already used up all the radishes we planted, a lot of the spinach and some of the salad. Even though I already built four raised beds, I think I need to build at least a few more this year. Luckily, these are pretty quick to put together (for now, I just use scrap wood and don’t make them very tall).
&lt;/p&gt;
&lt;p&gt;
	I went for my first swim in the lake that’s across the street. Pretty cold, but really nice. In other water-related news, I also did a whole bunch of stuff in the garden, and I started the plumbing for our garden. I put all the lines above ground for now, to make sure there are no leaks and because we plan to build a terrace anyway.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 21 May 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-20</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-20</guid>
		</item>
		<item>
			<title>Weeknotes № 19</title>
			<description>
				&lt;p&gt;
	We spent last week iterating on the book, mostly drawing diagrams. Because our understanding of SwiftUI has gotten much better since the previous release, we also have much better explanations and much better visuals. We also had to change some things in the underlying infrastructure, but that all worked out. Can’t wait to get this ready.
&lt;/p&gt;
&lt;p&gt;
	For a side project, I spent half a day researching how to sync data using CloudKit. It seems to be pretty easy. Last time I tried that, I had a hard time configuring things, and understanding how the pieces fit together, but it went without problems this time.
&lt;/p&gt;
&lt;p&gt;
	Before we moved in, we started planting a bunch of things in raised beds, and I built two more raised beds last week. We sowed most things ourselves, and bought some small plants as well. We harvested spinach, radish, salat and a number of herbs. It is such a luxury to walk outside into the garden and directly harvest what we need. It also makes me appreciate how much effort goes into this: even with a few large raised beds we would not even come close to growing what we would need to be self-sufficient.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chris.eidhof.nl/images/2023-05-14-garden.jpg&quot; title/&gt;&lt;/p&gt;
&lt;p&gt;
	Most of our kitchen arrived, which definitely helps in making the new house liveable. The main thing missing is the fridge, which is challenging but fine (we have a small portable cooler that holds the essentials for a family of four). Hopefully the fridge gets here soon.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 14 May 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-19</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-19</guid>
		</item>
		<item>
			<title>Weeknotes № 18</title>
			<description>
				&lt;p&gt;
	For our book, I added support to draw nicer diagrams (with overlays on the arrows placed in exactly the right spot). I also changed the syntax highlighting so that we can generate custom attributed strings for certain parts. You can see both parts in action in &lt;a href=&quot;https://m.objc.io/@chris/110304502914075277&quot;&gt;this post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	We also finally moved into our new house! It’s not finished yet, so we had to already move between the two floors twice, but by next week we’ll (hopefully) have a finished kitchen, finished bathrooms and a ground floor that’s completely done.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 07 May 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-18</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-18</guid>
		</item>
		<item>
			<title>Weeknotes № 17</title>
			<description>
				&lt;p&gt;
	We spent a lot of time working on laying out our book, and are getting much closer now. Even though we were “80%” done already, getting all the details right takes a lot of time and tweaking:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			We added internal links to the book
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We added warnings for widows and orphans
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We added support for print margins (i.e. margins that differ per page)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We added support to supress headers on title pages and empty pages (the header shows the chapter name and page number)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We added support for state to our attributed string builder library, this threads state through the rendering (useful for e.g. footnotes or numbering things)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We added a PDF outline to the book (the “table of contents” you see in Preview)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We tweaked all the small details (spacing, line height, list rendering, etc.)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			We spent a long time going back and forth on different styles for rendering our diagrams. The view tree diagrams that we want to show have code, a preview and a diagram. Getting these all on a single page with a good layout wasn’t easy at all.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	I think we’re very close now to the output that we want. The main thing left is styling the diagrams further, not just the view tree diagrams but also render trees, layout trees, and so on.
&lt;/p&gt;
&lt;p&gt;
	Here’s a sample page showing the current state:
&lt;/p&gt;
&lt;img src=&quot;http://chris.eidhof.nl/images/tis-page.png&quot; style=&quot;width: 216&quot;&gt;

&lt;p&gt;
	We spent a lot of time with the family while over in The Netherlands, and for the first time in half a year, I ran more than 100kms this week. I’m looking forward to build that mileage out again.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 30 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-17</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-17</guid>
		</item>
		<item>
			<title>Weeknotes № 16</title>
			<description>
				&lt;p&gt;
	At the start of the week, I worked on making our (private) SwiftUI library for drawing tree diagrams a bit simpler. It has code for both drawing the diagrams as well as parsing the type of a view and turning that into an interactive diagram. I separated that into two packages and simplified the tree diagramming library.
&lt;/p&gt;
&lt;p&gt;
	On Tuesday we recorded some Swift Talk episodes, and on Wednesday I spent time around the new house and with the family.
&lt;/p&gt;
&lt;p&gt;
	On Thursday and Friday, Florian and me sat down to finally start typesetting &lt;a href=&quot;https://www.objc.io/books/thinking-in-swiftui/&quot;&gt;Thinking in SwiftUI&lt;/a&gt;. We tackled a whole bunch of stuff: the cover pages, much of the typography, highlighting, styling, and so on. A bunch of this code is in the &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;attributed string builders&lt;/a&gt; package. We still need to add tests and documentation for those features, but for now, we just build what we need and test it by looking at the generated PDF.
&lt;/p&gt;
&lt;p&gt;
	I’m still not sure whether or not us writing the book generation ourselves (on top of attributed strings and TextKit) is a good idea, but it definitely is a lot of fun. For now it still seems very promising and much easier to write than LaTeX or using a program like InDesign. But let’s see what we think about this in a few years from now…
&lt;/p&gt;
&lt;p&gt;
	We left our temporary holiday home and went on a trip to visit our family in The Netherlands. When we get back, we’ll officialy and finally move into (the ground floor of) the new house. Very exciting!
&lt;/p&gt;
			</description>
			<pubDate>Sun, 23 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-16</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-16</guid>
		</item>
		<item>
			<title>Weeknotes № 15</title>
			<description>
				&lt;p&gt;
	In Germany everyone gets time off for easter, and we spent time with friends and family. We also planted a bunch more things, really looking forward to summer where we’ll have a lot of fresh vegetables. We’re trying out a bunch of new things, so excited to see how well everything goes. The spinach, salad and onions are cropping up already.
&lt;/p&gt;
&lt;p&gt;
	I worked on getting our book building software up to date. There are many dependencies (rendering using attributed strings, drawing diagrams, our own layout implementation to help generate explanations, and so on). We were still depending on an internal version of &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;attributed-string-builder&lt;/a&gt; which was essentially an extend subset of the public repository.
&lt;/p&gt;
&lt;p&gt;
	I configured everything to (hopefully) be a very low-friction experience. I set up single Xcode project with virtually all code in Swift packages. For editing, we can just drop the package into the Xcode project and have a local editable version.
&lt;/p&gt;
&lt;p&gt;
	While we wrote the book using Dropbox Paper, we now are typesetting it using attributed strings. All of our previous published books were typeset using a mix of homegrown scripts, Pandoc, LaTeX and a bunch of other stuff. We always had the full setup working on at least one machine, but we decided to try a different setup for this release.
&lt;/p&gt;
&lt;p&gt;
	I also worked on a simple “connecting the dots” view to draw lines between arbitrary views in the view hierarchy. This works by propagating the center of each of the icons up (using anchors), and then drawing lines between all the connections. This technique is useful beyond this example, of course:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/2023-15/1-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/2023-15/1.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	I’ll try to either write this up as a blog post or we’ll record it for Swift Talk.
&lt;/p&gt;
&lt;p&gt;
	The painter spent last week painting the house, I helped with a bunch of preparation and final details. Next week we’ll get the flooring done on the ground floor, and in a few more weeks we’ll finally move in!
&lt;/p&gt;
			</description>
			<pubDate>Sun, 16 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-15</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-15</guid>
		</item>
		<item>
			<title>Weeknotes № 14</title>
			<description>
				&lt;p&gt;
	I worked a bit on porting some “older” features we had in our test implementation of attributed string builder, and added them to our &lt;a href=&quot;https://github.com/objcio/attributed-string-builder&quot;&gt;public repository&lt;/a&gt;. We’re planning to use that for publishing our book. We want back and forth a lot, but we believe it’s easier to work with our own implementation based off of attributed strings than trying to wrangle LaTeX or desktop programs such as InDesign into the layout we want. By using attributed strings, we can write our book while automatically having our code checked, syntax highlighted and have proper previews.
&lt;/p&gt;
&lt;p&gt;
	I wrote a &lt;a href=&quot;https://github.com/chriseidhof/swiftui-video-recording&quot;&gt;small library&lt;/a&gt; that helps me to record a SwiftUI view as an mp4 video. I always find it annoying to precisely record a video of an interaction, transition or animation, and this should hopefully make it a little bit easier, as it records exactly the bounds of a view: I don’t have to fiddle with positioning QuickTime or hope I get the timing right.
&lt;/p&gt;
&lt;p&gt;
	I also wrote up a quick blog post about &lt;a href=&quot;http://chris.eidhof.nl/post/matched-geometry-effect&quot;&gt;matched geometry effect&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	I was really tired from the move last week, and this week went pretty slow because of that. I didn’t even have the energy for my daily run, but instead of fighting that I just rested. I started preparing an upcoming workshop, working a bit on the book (we forgot to write about EnviromentObject). While I did feel very tired, I am also way less stressed now that it’s only the final bits of the house.
&lt;/p&gt;
&lt;p&gt;
	We spent a few days in and around our new house, cleaning things, building more raised beds, and so on. It feels pretty great to do that now that spring is really starting.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 09 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-14</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-14</guid>
		</item>
		<item>
			<title>When Matched Geometry Effect Doesn&apos;t Work</title>
			<description>
				&lt;p&gt;
	One of the SwiftUI APIs that always kept confusing me is matchedGeometryEffect. I often thought I could use it but couldn’t figure out exactly how to make it work, always getting weird effects. I tried to distill the problematic code down to the essence:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct ContentView: View {
    @State private var detail = false
    @Namespace private var ns

    var body: some View {
        ZStack {
            if detail {
                Color.red
                    .frame(width: 100, height: 100)
                    .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
            } else {
                Color.red
                    .frame(width: 300, height: 300)
                    .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
            }
        }
        .animation(.default, value: detail)
        .onTapGesture {
            detail.toggle()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	When you run the code above, you will see that there is something like a transition between the two red squares, but there’s nothing smooth about it. Why doesn’t the small square grow bigger, and why doesn’t the large square grow smaller? They only seem to shift.
&lt;/p&gt;
&lt;video class=&quot;light-video&quot; width=&quot;320&quot; height=&quot;320&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-light.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;video class=&quot;dark-video&quot; width=&quot;318&quot; height=&quot;318&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-dark.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;
	What helped me understand is &lt;a href=&quot;https://talk.objc.io/episodes/S01E260-matched-geometry-effect-part-3&quot;&gt;reimplementing matchedGeometryEffect&lt;/a&gt;. While there is a bit more to it, the matched geometry effect will essentially apply a &lt;code&gt;frame&lt;/code&gt; and an &lt;code&gt;offset&lt;/code&gt; modifier. Let’s consider only the if-branch:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Color.red
    .frame(width: 100, height: 100)
    .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	If we virtually “inline” the matched geometry effect, the code looks like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Color.red
    .frame(width: 100, height: 100)
    .offset(x: &amp;lt;matchedX&amp;gt;, y: &amp;lt;matchedY&amp;gt;)
    .frame(width: &amp;lt;matchedWidth&amp;gt;, height: &amp;lt;matchedHeight&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	While the outer frame and offset will have an effect on where the view is positioned, we can see that the inner frame will ultimately control the size, overriding the proposed size of the outer frame modifier. In other words: the red square will &lt;em&gt;always&lt;/em&gt;
	 render at 100⨉100.
&lt;/p&gt;
&lt;p&gt;
	To fix this, we need to change the order of our modifiers so that the &lt;code&gt;matchedGeometryEffect&lt;/code&gt; is directly applied to the color. As the color is completely flexible, this doesn’t cause any problems. Here’s the changed &lt;code&gt;if&lt;/code&gt; branch, the &lt;code&gt;else&lt;/code&gt; branch needs to change as well:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Color.red
     .matchedGeometryEffect(id: &amp;quot;rect&amp;quot;, in: ns)
     .frame(width: 100, height: 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Now our rectangle animates smoothly between the two states:
&lt;/p&gt;
&lt;video class=&quot;light-video&quot; width=&quot;318&quot; height=&quot;318&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-fixed-light.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;video class=&quot;dark-video&quot; width=&quot;318&quot; height=&quot;318&quot; autoplay playsinline muted loop&gt;
   &lt;source src=&quot;http://chris.eidhof.nl/movies/mge-fixed-dark.mp4&quot; type=&quot;video/mp4&quot;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;
	(Of course, the above animation could be done in a much simpler way by removing the if/else, but I wanted to work with a minimal example that uses matched geometry effect.)
&lt;/p&gt;
			</description>
			<pubDate>Tue, 04 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/matched-geometry-effect</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/matched-geometry-effect</guid>
		</item>
		<item>
			<title>Weeknotes № 13</title>
			<description>
				&lt;p&gt;
	We spent a lot of last week moving our stuff, culminating on Friday where we had to actually leave our old place. This was pretty stressful with two kids running around, and the oldest getting pretty sick at the beginning of the week. But we managed, all of our stuff is in the basement of the new place and we are in a furnished apartment for the next weeks.
&lt;/p&gt;
&lt;p&gt;
	A lot of stuff got done: the tilers finished the upstairs bathroom and unexpectedly also finished the downstairs one, the electricity is mostly done, and the painter painted two more rooms. Now it’s a bit of a waiting game where little will happen next week, but hopefully everything should be finished somewhere around the end of this month.
&lt;/p&gt;
&lt;p&gt;
	We also prepared and recorded a bunch of Swift Talk episodes in which we reimplemented SwiftUI’s anchors from “scratch” (only using preferences and geometry readers). Doing this gave us a lot of insight into how these actually work and their limitations. We reimplemented parts of SwiftUI many times (anchors, &lt;a href=&quot;https://talk.objc.io/episodes/S01E260-matched-geometry-effect-part-3&quot;&gt;matched geometry effect&lt;/a&gt;, the &lt;a href=&quot;https://talk.objc.io/collections/swiftui-layout-explained&quot;&gt;layout system&lt;/a&gt;, the &lt;a href=&quot;https://talk.objc.io/collections/swiftui-state-explained&quot;&gt;state system&lt;/a&gt;) and every time we learn a lot about how these things work. We also get feedback from other people that it helps them, which is always nice.
&lt;/p&gt;
&lt;p&gt;
	I’ve been working on a pure Swift implementation of Git’s core data model recently, and can currently read out (simple) repositories and their objects (commits, trees, and blobs). On the train back from the studio I also managed to read out Packfiles. I’d like to add support for writing things as well as adding support for the index. At its core, git truly is simple and beautiful, even though I’m the first to admit that the interface has often confused me.
&lt;/p&gt;
&lt;p&gt;
	We started preparing for another workshop sometime at the middle of this month, should be really fun. We’ve gotten into a really good flow where we know exactly what topics to cover, but can still create a completely custom workshop for the team we’re working with. One of the things I’m also pretty happy about is that we have a hard limit on team sizes (sixteen people max) so that we can really make it personal and spend a decent amount of time with all the individual attendees. Preparing and running the workshops is pretty stressful but also very rewarding.
&lt;/p&gt;
&lt;p&gt;
	Another random thought that occupied me a bit is that my nationality never felt like a big part of my identity while I lived in the Netherlands, but does so now. Even when I emigrated to Berlin it was never a big deal – there were so many foreigners in my little bubble there that I hardly ever stood out. However, here on the countryside, it’s a different story. There are a lot of people that are from here and have never really been anywhere else. It feels like even Germans from other parts of Germany stand out, let alone foreigners like me. I don’t really mind, but it’s been an interesting observation.
&lt;/p&gt;
&lt;p&gt;
	I’ve also been thinking about AI a bit recently (who hasn’t?). I don’t have a very strong opinion on the topic, I believe it’ll change our daily lives (especially for us computer people), but I don’t feel like anyone can really predict &lt;em&gt;how&lt;/em&gt;
	 it’ll change things. I’m not sure whether it’ll be good or bad (probably both?). One of my favorite bloggers on the topic is &lt;a href=&quot;https://simonwillison.net&quot;&gt;Simon Willison&lt;/a&gt;, who’s doing pretty practical experiments as well as trying to take a more high-level view.
&lt;/p&gt;
&lt;p&gt;
	I’ve experimented with ChatGPT to do generate sample data (for our workshops), and it was great at that, even providing JSON data and matching Swift structs that conform to &lt;code&gt;Codable&lt;/code&gt;. I tried using it to generate some algorithms that I know (e.g. a flow layout) but I’m not quite comfortable giving that part up (even though it did do a pretty good job). It also is useful for generating ideas. For example, I let it generate ten or twenty ideas for marketing our new book. Much of it isn’t stuff I couldn’t think of myself, but there were one or two things that I could definitely use. I don’t personally feel like letting it do things that feel important to me – most of programming, writing, and other forms of communication.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 02 Apr 2023 00:00:00 +0200</pubDate>
			<link>http://chris.eidhof.nl/post/2023-13</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-13</guid>
		</item>
		<item>
			<title>Weeknotes № 12</title>
			<description>
				&lt;p&gt;
	Last weekend, we spent the entire sunny weekend around our new house, and with my 5-yo daughter we tackled a whole bunch of small projects: building some walls, sorting out wood, and building and planting our first raised bed.
&lt;/p&gt;
&lt;p&gt;
	We recorded a few Swift Talk episodes on Monday, and afterwards (while in Berlin) I met up with a bunch of nice people. The episodes themselves are about using &lt;code&gt;Codable&lt;/code&gt; for routing. This is an interesting technique we actually prototyped a few years ago to get bidirectional conversion between an enum and a (String) route you’d use for a web server.
&lt;/p&gt;
&lt;p&gt;
	We also continued polishing our book. I wrote a section about matched geometry effect which Florian promptly rewrote into something much clearer. I would like to also turn this into a blog post, hopefully soon.
&lt;/p&gt;
&lt;p&gt;
	Over at the house, the plasterers finished, the painter came over for an afternoon to try out the paint, and the tilers started on the upstairs bathroom. Things are looking way more finished, even though it’s still quite a ways to go. I had moved a whole bunch of stuff already, and yesterday we had our family help us move almost everything else. We do still have the bare essentials over at the old place, and we’ll move that on our last day here (next week!). Before moving in, we’ll stay in a holiday home for a few weeks while everything is getting finished.
&lt;/p&gt;
			</description>
			<pubDate>Sun, 26 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-12</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-12</guid>
		</item>
		<item>
			<title>Weeknotes № 11</title>
			<description>
				&lt;p&gt;
	This week we managed to send over all our remaining chapters except for the introduction to technical review. At the last minute, we added a section about coordinate spaces and anchors. In thinking about this, we realized that anchors are purely convenience, it really seems to be just a measurement in the global coordinate space that can automatically be converted to another view’s local coordinate space.
&lt;/p&gt;
&lt;p&gt;
	What triggered this was us using anchors to add lines (pointers) to our diagrams, as shown &lt;a href=&quot;https://m.objc.io/@chris/110015766999219930&quot;&gt;here&lt;/a&gt;. Anchors are great for measuring things at different parts of the view tree. Note that the diagrams aren’t finished yet, for example, we’d like to avoid lines going through text and want to have nicer shapes and line endings (the arrows at the line ends are not looking good).
&lt;/p&gt;
&lt;p&gt;
	I also worked a bit on the pure Swift Git library (after being tired from writing and editing), and can read a repository’s commits and explore the other objects in the repository as well using an interactive SwiftUI app.
&lt;/p&gt;
&lt;p&gt;
	While we gave away a whole bunch of things that we don’t want to move, we still ended up with a bunch of trash. Getting this picked up caused me a whole lot of stress this week, with people going through our trash as it was out, ripping open our bags and throwing everything on the street. I confronted the people who did it and told them very clearly to not do this again.
&lt;/p&gt;
&lt;p&gt;
	At day care, there was a presentation at night for the parents, about small kids and media. While the idea behind it was good, the presentation was pretty boring, had unrealistic figures and I felt that it was generally a bit uninformed. I wonder if people are aware of the risks and possibilities that all the new technology has. I did speak up, as did another parent, and I think I got my message across. I guess in the end, we’ll end up not understanding the technology our kids use, not supervising it (once they become teenagers). I guess the only thing we can try is to remain in touch with our kids and try to keep the conversation going.
&lt;/p&gt;
&lt;p&gt;
	I started going to therapy a few months ago, to deal with all the stress around renovation and moving, as well as working on some personal things. It’s been incredibly useful. I did realize that work is one of the most relaxing things for me, being in the zone with interesting challenges that I know I can solve. Most of the other areas of my life cause more stress than work does, which is pretty funny to me.
&lt;/p&gt;
&lt;p&gt;
	I’m looking forward to building some garden beds this weekend over at the new house. I cleared away the last bits of trunks that were still laying around that area, and will build at least one raised bed this weekend, hopefully as a family activity.
&lt;/p&gt;
&lt;p&gt;
	I also experimented a bit more with ChatGPT and see if I can use it in my daily workflow (essentially treating it as a fast, “dumb” assistant). I’ve previously used it to generate sample data for a workshop (sample JSON including a Codable struct), and it worked really well for that. This week I had it generate a pretty-printed version of &lt;code&gt;CGSize&lt;/code&gt;, &lt;code&gt;CGPoint&lt;/code&gt; and &lt;code&gt;CGRect&lt;/code&gt;. I would have typed it faster myself, but I want to get into the habit of experimenting with it to automate boring bits. Essentially, I have no trust in the correctness of its output, so for me, the key is using it in places where correctness can either be verified very easily (a pretty printer) or where correctness isn’t a factor (sample data for displaying a list of shopping items).
&lt;/p&gt;
			</description>
			<pubDate>Sat, 11 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-11</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-11</guid>
		</item>
		<item>
			<title>Weeknotes № 10</title>
			<description>
				&lt;p&gt;
	This week we tried to  “ship” a bunch of Thinking in SwiftUI chapters to &lt;a href=&quot;https://oleb.net&quot;&gt;Ole&lt;/a&gt;, who’s doing the technical review. We managed to get the chapters on view layout, view trees and environment over to him. We went through all of these chapters once again, and also added a bunch of diagrams.
&lt;/p&gt;
&lt;p&gt;
	I wanted to get the State chapter ready as well, but reading through it I felt that we could do better. So we went back, added some more explanations and some diagrams. &lt;a href=&quot;https://m.objc.io/@chris/110000399994383042&quot;&gt;Here’s a sample&lt;/a&gt; of what the state diagrams could look like (this is a first version).
&lt;/p&gt;
&lt;p&gt;
	I had some nice quality time with my oldest daughter this week. Among other things, we built a small kid-sized picknick table together out of scrap wood, which we both really enjoyed.
&lt;/p&gt;
&lt;p&gt;
	At the new house, I moved over a whole bunch of stuff (to the basement). We had three trees cut down a few weeks back, and the logs were massive and had been laying around in the garden because I couldn’t move them alone. We turned them into smaller chunks using the chainsaw and I then split them using a wedge and a large sledge hammer. This was quite fun (hard physical work outside) but also pretty exhausting.
&lt;/p&gt;
&lt;p&gt;
	The plasterers are pretty far now with the loam plastering. It’s turning out really nice, but the big issue is that it takes multiple weeks (at the least) to dry. As we’ll have to move out of our existing house within a few weeks, this isn’t ideal. So we found a small temporary place where we can hopefully live for a month or so as the final finishing steps happen (painting and flooring).
&lt;/p&gt;
&lt;p&gt;
	As an experiment, I tried implementing a pure Git library in Swift, using some of the ideas from &lt;a href=&quot;https://wyag.thb.lt&quot;&gt;Write yourself a Git&lt;/a&gt;. It went quite well, I managed to read trees, blobs and commits. The core of Git is extremely simple (honestly), and I think building a few commands on top of this small library (such as committing, or maybe even merging) will be a very interesting learning experience.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 10 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-10</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-10</guid>
		</item>
		<item>
			<title>Weeknotes № 9</title>
			<description>
				&lt;p&gt;
	This week we continued writing our book. I wrote the first draft of the last chapter that wasn’t written yet (Environment). We both spent a lot of time editing and finetuning the other chapters. I think the animations chapter and the section on alignment will be extremely helpful.
&lt;/p&gt;
&lt;p&gt;
	Together with &lt;a href=&quot;https://www.juulspee.nl&quot;&gt;Juul&lt;/a&gt; we added a bunch of new features to the workshop app, which included changing three applications: the Mac app that the attendees use, the instructor app and the server (written in Swift). To provide a unified API to all three I used the technique described in the &lt;a href=&quot;http://chris.eidhof.nl/post/simpler-swift-apis/&quot;&gt;previous post&lt;/a&gt;. I also tried to look into distributed actors, as they seem to solve exactly this problem, but I couldn’t wrap my head around them (and how to use them for my client/server purposes) in a single morning.
&lt;/p&gt;
&lt;p&gt;
	I went through a big fight with libpq (or actually, with Swift Package Manager trying to understand that the package is installed on my machine). I really dread fixing these kinds of errors (the package is there, but for some reason SPM can’t see it). In the end I came up with a hack to make it work on my machine (it worked fine in Docker). In the future, I’d really like to replace our postgres dependency with sqlite, compiled in using the &lt;a href=&quot;https://www.sqlite.org/amalgamation.html&quot;&gt;amalgamation&lt;/a&gt;. That way, it’s almost impossible for that dependency to break. Also, it’ll allow us to upload a single binary to our server (containing everything).
&lt;/p&gt;
&lt;p&gt;
	We recorded a bunch of new episodes in our backend series, should be a lot of fun to watch.
&lt;/p&gt;
&lt;p&gt;
	At the new home, plastering is going well (even though we had to stop for a day due to low temperatures). We also had some trees felled — one neighbor was very happy about that and another neighbor went full-on passive-aggresive on me. Oh well. We’re now pretty sure we’ll have to move out of our rental house before we’ll be able to move into the new house. Should be interesting…
&lt;/p&gt;
			</description>
			<pubDate>Fri, 03 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-09</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-09</guid>
		</item>
		<item>
			<title>You Don&apos;t Need Routes</title>
			<description>
				&lt;p&gt;
	For the Mac app we use during our workshops, we also have a web server with an API. The server handles user registration and some other minor things. We just added support for sending one-way messages (from the instructors to the attendees). This involved the following steps:
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added endpoints for each separate messages
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added a route parser for each endpoint
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added the code to actually handle the endpoint (update the database, etc.)
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added endpoints to the client library
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;
			I added all the necessary data and wrapper methods to the client library for each endpoint
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	This is a bit of work, and we are already using a simple trick to make this easier. Because we will only use this API from Swift, our endpoints require that you post JSON to them. For example, to add a message, you can simply send the following &lt;code&gt;Codable&lt;/code&gt; struct, encoded as JSON:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;struct AddMessage: Codable, Hashable {
    var workshop: String
    var message: Message
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	We can share this struct between client and server and they automatically have matching interfaces. As I was out for a walk, it dawned on me that we could also do the same for our endpoints! Instead of having separate routes for each API endpoint, we could just have a single API endpoint that takes in a huge enum and switches on that. We can then share that enum with the client and they’d automatically be in sync.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;public enum APICall: Hashable, Codable {
    case addWorkshop(WorkshopData)
    case addMessage(AddMessage)
    case messages(workshop: String)
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	This saves us from a lot of manual typing, as we don’t need separate endpoints and routes, neither in the client nor the server. We simply add a case to the enum and add a corresponding wrapper call on the client. On the train, I made the change and was able to delete a bunch of code from both client and server.
&lt;/p&gt;
&lt;p&gt;
	One possible improvement would be to somehow encode the result type in this enum as well. Our &lt;code&gt;messages&lt;/code&gt; call will always return a &lt;code&gt;[Message]&lt;/code&gt; array, but that’s not encoded in the type system. However, for now, this greatly simplifies our code.
&lt;/p&gt;
&lt;p&gt;
	I wouldn’t recommend this approach when your API is consumed from other languages, as it will probably feel quite weird for those developers. But when you’re writing a server that will only be used by Swift clients, this is really nice.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 03 Mar 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/simpler-swift-apis</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/simpler-swift-apis</guid>
		</item>
		<item>
			<title>Weeknotes № 8</title>
			<description>
				&lt;p&gt;
	This week we mostly spent on writing the update of &lt;a href=&quot;https://www.objc.io/books/thinking-in-swiftui/&quot;&gt;Thinking in SwiftUI&lt;/a&gt;. I think by now we rewrote every chapter from scratch, and also added a new chapter about view trees. The ideas are still the same, but due to us diving deeper and definitely due to all the workshops we’ve hosted our explanations have gotten way better.
&lt;/p&gt;
&lt;p&gt;
	Over the weekend, I succesfully made bagels again (I think I now finally have found a way for me that produces consistent good results). I did burn my thumb, though.
&lt;/p&gt;
&lt;p&gt;
	I moved a bunch of the heaviest stuff I own (e.g. my table saw) to the basement of our new house, where I’ll be temporarily setting up my small workshop. I renovated the basement myself (as it wasn’t super important that it got done quickly or with a high quality). It feels quite nice to finally put at least one room to use.
&lt;/p&gt;
&lt;p&gt;
	The first two days of the week I helped out quite a bit around the new house to get everything prepared, because on Wednesday the plasterers started. This meant helping out moving cables out of the way (above the ceiling panels), cleaning, moving everything out of their way, and so on. They will be plastering everything with a thick layer of clay (Lehm/loam). This material works well with the radiant wall heating and has a lot of nice properties – among other things, it regulates humidity and absorbs a bunch of unwanted particles. Let’s see how that turns out once we live there!
&lt;/p&gt;
&lt;p&gt;
	For the book, we worked mostly on the state and advanced layout chapters. I wrote a flow layout example in many different ways: once using the &lt;code&gt;Layout&lt;/code&gt; protocol and once using &lt;code&gt;ZStack&lt;/code&gt; and preferences. I then added alignment (both vertically within a single line as well as the horizontal alignment of the lines). I tried at least four different ways to implement the algorithm, and I’m still not completely sure what the simplest implementation is (they all have different qualities). We also started writing the environment chapter, as we already have written all the other chapters (although none are quite finished yet).
&lt;/p&gt;
&lt;p&gt;
	I love writing in VIM (or Spacemacs), but we started a few drafts in Dropbox Paper. To our own surprise, this worked really well for us. In fact, we’re still using it now that the chapters are almost done. It combines a very minimal UI (with features similar to Markdown) with change tracking and commenting. There’s no messing around with embedding images, you simply drag them into the document and you’re done. Later, once we are done writing, we’ll use the &lt;a href=&quot;https://talk.objc.io/episodes/S01E342-attributed-string-builder-part-6&quot;&gt;attributed string builder&lt;/a&gt; library to render this all into a nice PDF.
&lt;/p&gt;
&lt;p&gt;
	When I went to get my bike repaired, the owner of the repair shop mentioned he wouldn’t be in the day after because he needed to attend a seminar the next day. Asking more about this, it turns out that it was about electric bikes, automatic firmware updates, and so on. I’m a little scared for that future. I just want to ride my bike, I really, really don’t want it bricked because of a software update of sorts.
&lt;/p&gt;
&lt;p&gt;
	One other thing I had to think about this week is how most software has become very complex. I read &lt;a href=&quot;https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/&quot;&gt;a post by Julia Evans&lt;/a&gt; about build systems, and I feel the same way. While we do use a build system for most projects (either Xcode projects or SPM) I’m very hesitant to depend on many libraries, because coming back to a project a few years later will inevitably be painful as the dependencies have changed. Complexity isn’t just in the build system — in our workshops, I often notice that people don’t grasp essential parts of Swift (value types, generics, and so on). The language has become so big that it’s hard to really understand, even if you work with it every single day.
&lt;/p&gt;
&lt;p&gt;
	In general, I wonder if at some point people will be so fed up with that complexity that there will be a trend back to simpler languages or ways of doing things. Or maybe something like &lt;a href=&quot;https://www.unison-lang.org&quot;&gt;Unison&lt;/a&gt; will catch on.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 24 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-08</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-08</guid>
		</item>
		<item>
			<title>Weeknotes № 7</title>
			<description>
				&lt;p&gt;
	This week I mostly spent coordinating the house renovation, and doing lots of odd jobs. We had to take down a very old ceiling (not sure if it was the original ceiling from when the house was built) consisting of plaster, reed matting, and boards, ending up with just the ceiling joists. The next day, we covered the spaces in between the ceiling joists with drywall, which turned out really nice!
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chris.eidhof.nl/images/ceiling.jpg&quot; title/&gt;&lt;/p&gt;
&lt;p&gt;
	We also cleaned up almost everything in the house, because next week the plastering company will start and they need a completely empty space. To move stuff over (from our current house to the basement of the new place) I borrowed a trailer and drove my car with a trailer for the first time in my life (so far, it went fine).
&lt;/p&gt;
&lt;p&gt;
	Yesterday, the windows were finally installed. We had the holes cut out months ago, and since then, the place has been pretty dark. Now we finally have light! It actually makes an immense difference, things are finally starting to look a bit more like the result we had in mind.
&lt;/p&gt;
&lt;p&gt;
	Work-wise, I worked on some backend stuff for our workshop app, did the bookkeeping (we do this using &lt;a href=&quot;https://www.ledger-cli.org&quot;&gt;ledger&lt;/a&gt;) and chatted with a bunch of people. Next week we’ll finally start writing again, really looking forward to that.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 17 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-07</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-07</guid>
		</item>
		<item>
			<title>Weeknotes № 6</title>
			<description>
				&lt;p&gt;
	We got our internet access working at the new house. We also won’t move before the end of March, probably later, but at least that part is working. We had a bit of a setback this week, as we found out that the plastering will take quite a bit longer than calculated. It’s a big chain of dependencies: we can’t paint before we’ve plastered, we can’t lay the floor before we’ve painted, and we can’t start plastering before the new window frames are installed (which should happen next week!).
&lt;/p&gt;
&lt;p&gt;
	My best friend from The Netherlands came over, we just hung out, did a little bit of work on the house together (we put up a new bathroom ceiling). I made bagels, which turned out much tastier than last week, and they looked good, too!
&lt;/p&gt;
&lt;p&gt;
	As I’m quite pressed for time these days, I need to be a bit creative about combining activities. I ran with the youngest in the running stroller (she gets to sleep, the rest of the family gets a break, and I get to do some exercise). Also, we bought a cargo bike last year, and it arrived last fall. Every time I cycle go to our new house I bring a few boxes.
&lt;/p&gt;
&lt;p&gt;
	I’ve been using our cargo bike to transport kids (it fits a baby car seat and two small kids), transport building materials (although 6 bags of cement was pushing it), and I’ve already filled it up many times to move stuff over to the new house. It’s been a game-changer for me. I &lt;em&gt;think&lt;/em&gt;
	 I would’ve still done most of the trips by bike if it wasn’t for the cargo bike, but this way I can avoid virtually all our car usage within the city limits.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chris.eidhof.nl/images/cargo-bike.jpg&quot; title/&gt;&lt;/p&gt;
&lt;p&gt;
	I ordered “Airlineschienen” (I think it’s called lashing rail in English?) for the inside of the bike’s cargo box. This will let me flexibly attach a bunch of stuff, and should help me strap down the load. I’ll also use them to attach hooks for shopping bags (they tend to fall over when small), kids backpacks, etc.
&lt;/p&gt;
&lt;p&gt;
	(I did “upgrade” our car recently, adding a hitch and an external AirPlay screen. Of course, this was much simpler/cheaper/more sustainable than buying a new (used) car.)
&lt;/p&gt;
&lt;p&gt;
	We ran a two-day workshop, this time in CEST. It was really nice to have people in the workshop that already had a bunch of SwiftUI experience, we could go much deeper into the material and answer a lot of questions.
&lt;/p&gt;
&lt;p&gt;
	We improved some minor things in our interactive workshop explanation app, in the workshop itself and recorded a few episodes around our new backend library (which we plan to use to modernize/rewrite the Swift Talk backend with).
&lt;/p&gt;
&lt;p&gt;
	I published two blog posts this week that both came directly from questions in the workshop. The first post contains tips about the &lt;a href=&quot;http://chris.eidhof.nl/post/swiftui-environment-tips/&quot;&gt;SwiftUI Environment&lt;/a&gt; and the second post is about &lt;a href=&quot;http://chris.eidhof.nl/post/semantic-colors/&quot;&gt;semantic colors and styles&lt;/a&gt;. The second post includes some nice graphics that are automatically generated when building this site — they should look good with both the dark theme and the light theme.
&lt;/p&gt;
			</description>
			<pubDate>Fri, 10 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/2023-06</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/2023-06</guid>
		</item>
		<item>
			<title>Semantic Colors and Styles</title>
			<description>
				&lt;p&gt;
	In SwiftUI, most colors are &lt;em&gt;semantic colors&lt;/em&gt;
	 that get resolved at runtime. For example, here are a few colors (rendered on macOS) in both light mode and dark mode. It’s a little hard to see, but even colors like &lt;code&gt;.blue&lt;/code&gt; and &lt;code&gt;.red&lt;/code&gt; are slighly different:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/1-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/1.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	Note that the above colors might be influenced by other things as well. For example, they can change when you increase the color scheme contrast or enable other accessibility settings.
&lt;/p&gt;
&lt;p&gt;
	In my experience, most people build their apps in light mode, with dark mode often being added as an afterthought. This is absolutely fine. However, it does make sense to get into the habit of using &lt;code&gt;.primary&lt;/code&gt; instead of &lt;code&gt;.black&lt;/code&gt;, and using &lt;code&gt;.secondary&lt;/code&gt; for a secondary color. Then those parts will automatically adapt.
&lt;/p&gt;
&lt;p&gt;
	By default, text (and shapes, etc.) are not rendered using the current foreground color (which is .primary by default) but using the current &lt;em&gt;foreground style&lt;/em&gt;
	. Here’s a rectangle filled with the four foreground styles:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/3-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/3.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	As far as I know, &lt;code&gt;Color.primary&lt;/code&gt; and &lt;code&gt;Color.secondary&lt;/code&gt; are (currently) not settable via the environment, but the foreground style is. For example, here’s the same view, but with a &lt;code&gt;.foregroundStyle(.blue, .green, Gradient(colors: [.red, .yellow])&lt;/code&gt; applied. Note that the tertiary and quaternary styles are optional. The tertiary style defaults to the secondary style, and the quaternary to the tertiary style. As you can see, you don’t just have to use colors, you can also use any other type that conforms to &lt;code&gt;ShapeStyle&lt;/code&gt;:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/5-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/5.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	There’s a fourth useful style: &lt;code&gt;BackgroundStyle&lt;/code&gt;. You would typically use it using &lt;code&gt;.background&lt;/code&gt;, for example, like so:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;Text(&amp;quot;Hello, world&amp;quot;)
    .padding(10)
    .background(.background)
    .padding(20)
    .background(.blue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	On macOS, this will default to white in light mode, and a dark gray in dark mode. Similar to the foreground styles, you can also set it using the environment:
&lt;/p&gt;
&lt;p&gt;
	&lt;picture class=&quot;swiftui&quot;&gt;
		&lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/7-dark.png 2x&quot;/&gt;
		&lt;img srcset=&quot;http://chris.eidhof.nl/post/semantic-colors/7.png 2x&quot; style=&quot;width: auto;&quot;/&gt;
	&lt;/picture&gt;
&lt;/p&gt;
&lt;p&gt;
	In general, stick to using &lt;code&gt;.primary&lt;/code&gt; and &lt;code&gt;.secondary&lt;/code&gt; colors when you can. Also use the semantic foreground styles and background style, and you will be well prepared to add dark mode support to your app. Of course, you could go much further and define your own stylesheet, pass it through the environment and rely on that, but the builtin semantic styles will support both color scheme changes and respect accessibility settings.
&lt;/p&gt;
			</description>
			<pubDate>Thu, 09 Feb 2023 00:00:00 +0100</pubDate>
			<link>http://chris.eidhof.nl/post/semantic-colors</link>
			<guid isPermaLink="true">http://chris.eidhof.nl/post/semantic-colors</guid>
		</item>
	</channel>
</rss>